{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ZIOT Design 2019-11-18 ZIOT is the project ZCT IOT system. The system consists of several sub projects: This documentation is still under development and preview only! Basebox Basebox, aka WiFi \u677f or IoT Device , is a physical device attached to a machine to receive the desired signal(s) from the machine. Toolz Toolz is the utility program to install and configure softwares in Basebox. TOOLZ is designed to run on Windows Platform. IoT Application Server IoT Application Server is a server to communicate with all BaseBoxes and user clients such as Web UI. IoT Web UI Iot Web UI is a web-based user interface for end user to view and manipulate data in the system. Project Documentation This document site is the Documentation of the project we are working on. A good documentation may help the developers and users a lot. To know how the documentation is developed, please visit here for information.","title":"Overview"},{"location":"#ziot-design","text":"2019-11-18 ZIOT is the project ZCT IOT system. The system consists of several sub projects: This documentation is still under development and preview only!","title":"ZIOT Design"},{"location":"#basebox","text":"Basebox, aka WiFi \u677f or IoT Device , is a physical device attached to a machine to receive the desired signal(s) from the machine.","title":"Basebox"},{"location":"#toolz","text":"Toolz is the utility program to install and configure softwares in Basebox. TOOLZ is designed to run on Windows Platform.","title":"Toolz"},{"location":"#iot-application-server","text":"IoT Application Server is a server to communicate with all BaseBoxes and user clients such as Web UI.","title":"IoT Application Server"},{"location":"#iot-web-ui","text":"Iot Web UI is a web-based user interface for end user to view and manipulate data in the system.","title":"IoT Web UI"},{"location":"#project-documentation","text":"This document site is the Documentation of the project we are working on. A good documentation may help the developers and users a lot. To know how the documentation is developed, please visit here for information.","title":"Project Documentation"},{"location":"api-flow/","text":"API Flow This document is about the control flow of communication between Devices and the Server. Device is powered # Server flow Client 0 \u2193 Device is powered on. 1 \u2193 Device prepares programs: no_resend.lua , fix_store_add.lua , wifi_conn.lua 2 \u2193 Device execute network.setupMonitor() 3 Go to the Flow: Device connecting to network Device connecting to network # Router flow Client 0 WIFI router is listening. 1 WIFI router checking the credential. \u2190 Device try to auto connect the WIFI . 2 WIFI router accept the connection and assign an IP \u2192 Device gets IP assigned and trigger event wifimon.STA_GOT_IP . 3 On the event: network.WIFI_CONNECTED = true 3 On the event: Device resolves the endpoint URL by calling network.resolveEndpoint() 3 On the event: create websocket instance by calling network.createWS() 3 On the event: try to obtains server time by calling network.httpReqTime() 3 On the event: try to establish the socket connection with server. Go to Flow: Device Socket connection Device Socket connection # Server flow Client 0 The server is listening 1 Server receives connection event. \u2190 Device submits a connection event to server. 1 Server verifies the endpoint URL ( admin.sql.getOrgsByOrgKey ). If error occurs, close the socket client connection by calling ws.close() . ws.close() will not immediately close the connection, it may have about 3s delay.","title":"API Flow"},{"location":"api-flow/#api-flow","text":"This document is about the control flow of communication between Devices and the Server.","title":"API Flow"},{"location":"api-flow/#device-is-powered","text":"# Server flow Client 0 \u2193 Device is powered on. 1 \u2193 Device prepares programs: no_resend.lua , fix_store_add.lua , wifi_conn.lua 2 \u2193 Device execute network.setupMonitor() 3 Go to the Flow: Device connecting to network","title":"Device is powered"},{"location":"api-flow/#device-connecting-to-network","text":"# Router flow Client 0 WIFI router is listening. 1 WIFI router checking the credential. \u2190 Device try to auto connect the WIFI . 2 WIFI router accept the connection and assign an IP \u2192 Device gets IP assigned and trigger event wifimon.STA_GOT_IP . 3 On the event: network.WIFI_CONNECTED = true 3 On the event: Device resolves the endpoint URL by calling network.resolveEndpoint() 3 On the event: create websocket instance by calling network.createWS() 3 On the event: try to obtains server time by calling network.httpReqTime() 3 On the event: try to establish the socket connection with server. Go to Flow: Device Socket connection","title":"Device connecting to network"},{"location":"api-flow/#device-socket-connection","text":"# Server flow Client 0 The server is listening 1 Server receives connection event. \u2190 Device submits a connection event to server. 1 Server verifies the endpoint URL ( admin.sql.getOrgsByOrgKey ). If error occurs, close the socket client connection by calling ws.close() . ws.close() will not immediately close the connection, it may have about 3s delay.","title":"Device Socket connection"},{"location":"api-miot/","text":"MIOT API Types of Request Register - Used to register a new installation. Data Process - Used to request or update data from miot. It requires access checking in request headers Register Process Create a QR Cdoe (WebUI) App scans the QR Code App redirect to RegisterPage App methods.buildConnection setup a connection to server to inspect the QR Code validity App show Passcode enter form if the QR code is valid via url /pdata/v1/token-v/.. api If passcord test passed, App methods.passcodeDone will manage the display and run methods.installRegistration methods.installRegistration call util.installSystemProfile util.installSystemProfile use internal function _install_system_profile _install_system_profile will connect the server /miot/v1/register do perform actual registration process /miot/v1/register will insert table miot and return its miot record in {data} _install_system_profile receive the response do insert or update of the local store Data Process Request Server side check any request with the custom http header variable: X-MIOT-LINK = <miot.iid>.<token>+<elements string> where the <elements string> contains /orgs/:org_id data.","title":"MIOT API"},{"location":"api-miot/#miot-api","text":"","title":"MIOT API"},{"location":"api-miot/#types-of-request","text":"Register - Used to register a new installation. Data Process - Used to request or update data from miot. It requires access checking in request headers","title":"Types of Request"},{"location":"api-miot/#register-process","text":"Create a QR Cdoe (WebUI) App scans the QR Code App redirect to RegisterPage App methods.buildConnection setup a connection to server to inspect the QR Code validity App show Passcode enter form if the QR code is valid via url /pdata/v1/token-v/.. api If passcord test passed, App methods.passcodeDone will manage the display and run methods.installRegistration methods.installRegistration call util.installSystemProfile util.installSystemProfile use internal function _install_system_profile _install_system_profile will connect the server /miot/v1/register do perform actual registration process /miot/v1/register will insert table miot and return its miot record in {data} _install_system_profile receive the response do insert or update of the local store","title":"Register Process"},{"location":"api-miot/#data-process-request","text":"Server side check any request with the custom http header variable: X-MIOT-LINK = <miot.iid>.<token>+<elements string> where the <elements string> contains /orgs/:org_id data.","title":"Data Process Request"},{"location":"api-overview/","text":"","title":"API Overview"},{"location":"api/","text":"IoT Server APIs This document is to describe the design of iot server version 2. This is a big change to the whole design from database to interface (API). Databases Version 2 design introduce the following databases changes: New admin.db to maintain the organization and logins information. Support more than one data.db (the old name is test.db). Redesign of the table schema. Naming Convention Table name is in norn plural form. Table name is in lower case and separated by underscore _ . Field _id in a table is the unique identity key of the record in the table. Field cwho in a table is the id of creation login of the record. Field cts in a table is the timestamp ( js ) of creation of the record. Field who in a table is the id of modification login of creation of the record. Field ts in a table is the timestamp ( js ) of modification of the record. Field sdate in a table is the shift date (\u73ed\u6b21\u65e5\u671f) of the record. If a field name is the same as a table name x , it is referencing to the _id of the table of x . admin.db logins field description remark _id The internal id of the login record type The type of login super uid The user id or account code of the login pwd The encrypted user password pwds Internal use salt The salt of the user name The natural name of user email The email of the user mobile The mobile of the user tz The default timezone of the user. Default is 8. ts The ts of the creation/change of the record status The status of the user newly-created , .. reset_pwd_token The token of reset password request reset_pwd_ts The ts of reset password token orgs field description remark _id The internal id of the org record name The name of the org sn The short name of the org tz The timezone of org. It's default value is the tz of owner owner The owner of the org. ref to logins._id type The type of the org. personal , basic status The status of the org. newly-created , removed dataStore The name of the data store system internal assigned orgKey The orgKey of the org orgKeyTs The ts of the generation/change of orgKey ts the ts of the change of the record orgs_logins field description remark _id The internal id of this record orgs The id of the orgs ref to orgs._id logins The id of the logins ref to logins._id roles The role of the login in the org owner , viewer who The id of the user who create/change this record ref to logins._id status The status of this relationship enable , disabled ts The ts of the record restrictions field description remark _id The internal id of this record orgs The id of the orgs ref to orgs._id logins The id of the logins ref to logins._id role The role of the login have any restriction rules A JSON data to control what data should be be restricted. who The id of the user who create/change this record ref to logins._id ts The ts of the record data.db table devices new old description change remark _id ID The internal id of the device record Type change to CHAR. orgs The id of org the device belongs to ref to orgs._id physical_id device_id The chip id (nodemcu) or physical device id. It is read from device usage usage The usage description of the device token The device token tokenTs The timestamp of the creation of device token type Type of the device virtual-device status Status of the device enabled , disabled description The description of the device max_machine max_machine The max number of machine can be assigned to the device. who The id of user who create/change this record ref to logins._id ts The ts of the record table handlers Since 2019-09-06 This is to define the event data handler . new old description change remark orgs The id of org the handler belongs to ref to orgs._id _id The internal id of the handler record code The code of the handler. code = counter is reserved. name The name of the handler. process_type The process type the handler. Process Type let system know how to process (logic) the event data received. counter , on , off are its valid value. remark Any user remarks. who The id of login who change the record ref to logins._id ts The ts of the record changed cwho The id of login who create the record ref to logins._id cts The ts of the record created table hello |new|old|description| change remark| |--|--| |orgs| | The id of org the device belongs to | ref to orgs._id | |server_ts|server_ts|The server ts of the record| |devices |device_id | The device internal id| Type change to CHAR.| |op_ip|op_id| The ip of the device | |op_ts|op_ts| The ts of the hello message | Unix epoch | |message|message| The hello message(information) containing the device id, circuit type, start reason etc.| |machines| machine_id| The internal id of the machine the device is assigned.| ref to machines._id | table machines |new|old|description| change remark| |--|--| |orgs| | The id of org the machine belongs to | ref to orgs._id | |_id| ID | The internal id of the machine record | Type change to CHAR| |code| code| The code of the machine for daily usage or reference to its id in other system. |name| name| The name of tha machine| |type | type| The type of the machine| |class| class| The class of the machine. A class is a group of machines.| |spec| spec| The spec description of the machine.| |status|status| The current scheduled (planned) status of the machine| schedule_on , schedule_off , schedule_maint , disabled | |location|location | The location description where the machine is located. It can be a Map name. | |bound| | The bound data (x,y,w,h) of the machine in a map if the location is a map name. | |cum_count|cum_count| The cumulative count of the machine | |wo|wo| The current work order (production order, mo etc) the machine is working for.| This is a work status info| |product|product| The current product (part etc) the machine is working for.| This is a work status info| |mold|mold| The mold (or assistant tools) the machine is equipped. | This is a work status info| |target| target |The current target of cycle time of the machine| This is a work status info| |who| | The id of login who change the record | ref to logins._id |ts| | The ts of the record | table operations |new|old|description| change remark| |--|--| |orgs| | The id of org the record belongs to | ref to orgs._id | |server_ts|server_ts| The server ts of the record | |devices| device_id| The device which emits this record | Type change to CHAR| |op_ts| op_ts | The ts of the record from device |op_ip| op_ip | The ip of the device | |op_type|op_type| The type of the event| |cycle_tm|cycle_tm| The cycle time of the record. It is the time difference form the next record of the same org, same device, the same type | |machines|machine_id| The id of the machine of the device | |machines_wo| machine_wo | The copied value of wo of the machine of the device| ref to machines.wo | |machines_product| machine_product | The copied value of product of the machine of the device| ref to machines.product | |machines_mold| machine_mold | The copied value of mold of the machine of the device| ref to machines.mold | |machines_target| machine_target | The copied value of target of the machine of the device| ref to machines.target | table measures |new|old|description| change remark| |--|--| |orgs| | The id of org the record belongs to | ref to orgs._id | |server_ts|server_ts| The server ts of the record | |devices| device_id| The device which emits this record | Type change to CHAR| |op_ts| op_ts | The ts of the record from device |op_ip| op_ip | The ip of the device | |op_type|op_type| The type of the event| |cycle_tm|cycle_tm| The cycle time of the record. It is the time difference form the next record of the same org, same device, the same type | |machines|machine_id| The id of the machine of the device | |machines_wo| machine_wo | The copied value of wo of the machine of the device| ref to machines.wo | |machines_product| machine_product | The copied value of product of the machine of the device| ref to machines.product | |machines_mold| machine_mold | The copied value of mold of the machine of the device| ref to machines.mold | |machines_target| machine_target | The copied value of target of the machine of the device| ref to machines.target | |measure_x | | The x data of measure.| |measure_y | | The y data of measure.| |measure_z | | The z data of measure.| |measure_d1 | | The d1 data of measure.| |measure_d2 | | The d2 data of measure.| |measure_d3 | | The d3 data of measure.| |measure_c1 | | The c1 data of measure.| |measure_c2 | | The c2 data of measure.| |measure_c3 | | The c3 data of measure.| table shifts |new|old|description| change remark| |--|--| |_id| | The internal id of the shift| |orgs| | The id of org the shifts belongs to | ref to orgs._id | |class|class| The class of the shifts belongs to | | |code |code | The code the shift. It can be reference to a short code or id from other system.| |name |name | The name of the shift | |effective_from | effective_from | The start date of the the shift (inclusive)| |effective_till | effective_till | The till date of the the shift (inclusive)| |tz| timezone | The timezone value of the shift. It should be copied from the tz value of the organization. | |start|start | The start time string of the shift in 24 hours format HH:MM .| |hr| length_hr| The number of hours of the shift. It can be decimal (e.g. 4.5). using start and hr to determine the shift end time| table units_headers |new|old|description| change remark| |--|--| |_id| | |The internal id of this units header| |name | |The name of the header | |who| | The id of user create / change the record | |ts | | The ts of this record | table units |new|old|description| change remark| |--|--| |_id| ID |The internal id of this record| Type change to CHAR |headers| |The id of unit header | ref to units_headers._id | |machines| machine_id | The id of the machine attached | ref to machines._id | |devices| device_id | The id of the device attached | ref to devices._id | |status| | The status of the record | enabled , disabled | view v_current_shifts Interfaces This document is to describe the design of iot server machine interface version 2. The big change of this version of the api is to introduce version label in the api support both HTTP / Websocket protocols support multiple organization in one server introduce authentication of DI. As the previous version, there are still 3 major types of interfaces interacted with users and devices. MI - machine interface DI - data interface UI - user interface DI Most of the data communication between client and server is via Data Interface (DI). Protocol DI is working under HTTP protocol. General Endpoint The general endpoint is http://:org-endpoint/ suffixed by additional DI path of specific DI functions. General Response The general format of response of DI is {error, data} . If there is an error, there is an error value, otherwise the error is null or empty. If there is any data return, data may be array or object. It is implemented centrally in ctxReturn in core-bus.js in this version. DI Paths method DI path description GET ./data/v1/ The api endpoint of the version 1 (protected api) GET ./pdata/v1/ The api endpoint of the version 1 (public api) POST ./pdata/v1/reset-password submit to reset-password process POST ./pdata/v1/sing-on submit to sign-on process POST ./pdata/v1/sing-in submit to sign-in process POST ./pdata/v1/verify-reset-password submit to verify the reset-password token GET ./data/v1/me return the signed-in user info POST ./data/v1/me submit to change the signed-in user info POST ./data/v1/me/change-password submit to change the signed-in user password GET ./data/v1/me/orgs return the list of orgs the user is able to access POST ./data/v1/me/sign-off submit to sign-off process GET ./data/v1/orgs return the list of orgs the user is able to access GET ./data/v1/orgs/:org_id return the org data of the :org_id POST ./data/v1/orgs/:org_id submit to change the org data of the :org_id POST ./data/v1/orgs/:org_id/clear-org-key submit to clear the orgKey of the org POST ./data/v1/orgs/:org_id/new-org-key submit to generate a new orgKey of the org GET ./data/v1/orgs/:org_id/devices return the list of devices of the org :org_id PUT ./data/v1/orgs/:org_id/devices submit to register a new devices of the org :org_id GET ./data/v1/orgs/:org_id/devices/:device_id return data of the device :device_id of the org :org_id POST ./data/v1/orgs/:org_id/devices/:device_id submit to change the data of device :device_id of the org :org_id POST ./data/v1/orgs/:org_id/devices/:device_id/new-token submit to create new token of device :device_id of the org :org_id GET ./data/v1/orgs/:org_id/logins return the list of logins of the org :org_id PUT ./data/v1/orgs/:org_id/logins submit to create a new member login of the org :org_id GET ./data/v1/orgs/:org_id/machines return the list of machines of the org :org_id PUT ./data/v1/orgs/:org_id/machines submit to add a new machine of the org :org_id GET ./data/v1/orgs/:org_id/machines/:machine_id return the data of machine :machine_id of the org :org_id POST ./data/v1/orgs/:org_id/machines/:machine_id submit to change the data of machine :machine_id of the org :org_id POST ./data/v1/orgs/:org_id/machines/:machine_id/work-status submit to change the work status data of machine :machine_id of the org :org_id GET ./data/v1/orgs/:org_id/shifts return the list of shifts of the org :org_id GET ./data/v1/orgs/:org_id/units return the list of all units of the org :org_id GET ./data/v1/orgs/:org_id/units/:unit_id return the unit record of :unit_id of the org :org_id PUT ./data/v1/orgs/:org_id/units submit to create a new unit record of the org :org_id DELETE ./data/v1/orgs/:org_id/units/:unit_id submit to remove the new unit record :unit_id of the org :org_id GET ./data/v1/orgs/:org_id/units/of/device/:device_id return a list of units associated with the device :device_id of the org :org_id PUT ./data/v1/orgs/:org_id/units/of/device/:device_id/machine/:machine_id submit to associate device :device_id with machine :machine_id of org :org_id PUT ./data/v1/orgs/:org_id/units/of/devices/:device_id/:device2_id submit to associate two devices :device_id and :device2_id of org :org_id GET ./data/v1/orgs/:org_id/units/of/machine/:machine_id return a list of units associated with the machine :machine_id of the org :org_id PUT ./data/v1/orgs/:org_id/units/of/machine/:machine_id/device/:device_id submit to associate device :device_id with machine :machine_id of the org :org_id PUT ./data/v1/orgs/:org_id/units/of/machines/:machine_id/:machine2_id submit to associate two machines :machine_id and :machine2_id of the org :org_id GET ./data/v1/orgs/:org_id/_/t/:table generic selection api for a single table/view GET ./data/v1/orgs/:org_id/_/t/:table/:id generic selection api for a single table/view POST ./data/v1/orgs/:org_id/_/q generic sql runner api (only for development) DI Details reset-password POST ./pdata/v1/reset-password . body: {email} This DI only supports reset by providing the login email. This DI will trigger back-end process to generate a reset-password-token and submit an email to the email . sign-on POST ./pdata/v1/sign-on . body: { name, pwds, email, mobile, uid} This DI will submit request to server to create a new login. name , pwds , email are mandatory. mobile and uid are optional. If no uid , email will be the uid . If the process success, it will return the me object of the sign-on user. But it will NOT automatically sign in. sing-on process will also create personal org in back-end. sign-in POST ./pdata/v1/sign-in . body: { uid, pwds } This DI will submit request to server to sign in. If the process success, it will return the {data:{ok:true}} object. Otherwise it returns {error:\"<error>\"} object. verify-reset-password POST ./pdata/v1/verify-reset-password . body: {email, reset_pwd_token} This DI is to verify the reset-password-token by providing the login email. If the process success, it will return the {data:{ok:true}} object. me GET ./data/v1/me . This DI is to get the signed-in user info. No params is required. POST ./data/v1/me . body: {name, mobile, tz} This DI is to update the signed-in user info. All the params are optional. If pwds is changed, back-end will send an email to notify the email owner. If email changed, back-end will send an email to notify the original email address owner. POST ./data/v1/me/change-password . body : {pwdo, pwds} This DI is to change the password of the signed-in user. If the process success, it will return {data:{ok:true}} . GET ./data/v1/me/orgs This DI is to get the list of orgs which the signed-in user is able access. No params is required. The each record in the list of orgs has a field roles to indicate the role of the signed-in user of the org. sign-off POST ./data/v1/me/sign-off . This DI is to submit to process a sign-off process. No params is required. After process, the server will response {data:{ok:true}} object. orgs GET ./data/v1/orgs . This DI is to get the list of orgs which the signed-in user is able access. No params is required. Same as ./data/v1/me/orgs . GET ./data/v1/orgs/:org_id . This DI is to get the data of a specific org of :org_id POST ./data/v1/orgs/:org_id . Body: {name,sn,tz} This DI is to submit a change of the data of the org :org_id . clear-org-key POST ./data/v1/orgs/:org_id/clear-org-key . This DI is to submit to clear the orgKey of the org :org_id new-org-key POST ./data/v1/orgs/:org_id/new-org-key . This DI is to generate a new orgKey of the org :org_id devices GET ./data/v1/orgs/:org_id/devices . This DI is to get the list of all devices of the org :org_id . This DI supports filter query . PUT ./data/v1/orgs/:org_id/devices . Body: { physical_id, usage, type, description, max_machine } This DI is to submit to register a new device of the org :org_id . physical_id is mandatory. others are optional. type will be '' if it is not 'virtual-device'. max_machine is default to 1. If process is success it will return a device data object with at least the assigned _id and token fields. The register program has to write the _id and token back to the device, otherwise the device may not be able to connect to the server. GET ./data/v1/orgs/:org_id/devices/:device_id . This DI is to get the data of the device :device_id of the org :org_id . No token of devices will be shown in this DI. POST ./data/v1/orgs/:org_id/devices/:device_id . Body: { usage , status, description, max_machine, type} This DI is to submit to change the data of device :device_id of org :org_id . It will return new device object if success. POST ./data/v1/orgs/:org_id/devices/:device_id/new-token . This DI is to submit to create a new device token of device :device_id . This DI will then return the object: { _id, token ,tokeTs} . The register program has to write the newly created token back to the device. logins GET ./data/v1/orgs/:org_id/logins . This DI is to get the list of the logins of the org :org_id . PUT ./data/v1/orgs/:org_id/logins . Body: {uid, pwds, name, email, mobile,roles} . This DI is to submit to create a new member login of org. The member created with this DI is a member login of the org. uid , pwds and roles are mandatory. Others are optional. machines GET ./data/v1/orgs/:org_id/machines . This DI is to get the list of machines of the org :org_id . This DI supports filter query . GET ./data/v1/orgs/:org_id/machines/:machine_id . This DI is to get the data of the machine :machine_id of org :org_id PUT ./data/v1/orgs/:org_id/machines . Body: { code, name, class, spec, status, type, location, bound, cum_count, wo, product, mold, target } . This DI is to submit to register a new machine of the org :org_id . If process is success it will return a machine data object with the assigned _id field. POST ./data/v1/orgs/:org_id/machines/:machine_id . This DI is to submit to change the machine :machine_id of the org :org_id . The Post body is: js { code, name, class, spec, status, type, location, bound, cum_count, wo, product, mold, target } If process is success it will return a machine data object. POST ./data/v1/orgs/:org_id/machines/:machine_id/work-status . This DI is to submit to change the work status data of device :device_id . The Post body is: js { wo, product, mold, target , status} All params are optional. This DI will then return the object {ok:true} if success. shifts GET ./data/v1/orgs/:org_id/shifts . This DI is to get the list of shifts data of orgs :org_id . GET ./data/v1/orgs/:org_id/shifts/:shift_id . This DI is to get the data of the shift :shift_id of the org :org_id . DI Legacy Paths There are some legacy paths used in Web User Interface (WUI or simply UI) legacy path location /data/machines-current-shift-status/injection components/Dashboard.vue /data/_q components/DatabaseDebugger.vue /data/_t/v_operations? components/DayOperations.vue /data/_t/v_operations? components/DaySummary.vue /data/_t/devices?where=device_id= components/DeviceBasic.vue /data/_t/v_operations?where= /components/HelloAnalysis.vue /data/_t/v_hello?where=device_id /components/HelloAnalysis.vue /data/_t/v_hello?where=op_type='hello' and /components/LastHello.vue /data/_t/v_operations? /components/LastOperations.vue /data/_t/machines?where=id=${this.id} /compoents/MachineBasic.vue /data/_t/machines /components/MachineOperations.vue /data/_t/operations?where=machine_id= /components/MachineOperations.vue /data/_t/v_operations?where= /components/MachinesStops.vue /data/_t/machines?where=id=${this.id} /components/MachineWorkStatus.vue /data/_t/v_operations?where= /components/Projection.vue /data/_t/oprerations /views/Debugger.vue /data/_t/devices /views/Devices.vue /data/_t/units /views/Devices.vue /data/_t/machines /views/Machines.vue /data/_t/units /views/Machines.vue /data/_t/machines /views/MachinesReport.vue /data/_t/units /views/MachinesReport.vue MI Legacy Paths legacy path location \"http://\"..SERVER_DOMAIN..\"/time\" wifi.lua getServerTime() http://\"..SERVER_DOMAIN..\"/record/1/\"..DEVICE_ID..\"/\"..ip..\"/\"..sec wifi.lua sendRecord() \"http://\"..SERVER_DOMAIN..\"/record/0/\"..DEVICE_ID..\"/\"..ip..\"/\"..sec..\"/\"..m wifi.lua sendHello() MI Devices are using the MI to communicate with the IoT Server. MI version 1 (v1) provides interfaces with HTTP and WebSocket (WS) protocol. Prerequisite : The Device must be registered in an Organization already before calling the MI . The Device must be enabled before calling the MI . The Organization of the Device must be set to allow collecting data from the MI . General MI Protocol (Method) General Format of API Endpoints HTTP GET http://:org-endpoint/mi/v1/:orgKey/ ... HTTP POST http://:org-endpoint/mi/v1/:orgKey WS ws://:org-endpoint/ws/v1/:orgKey/ ... Where :org-endpoint is the server endpoint of the a user or organization. It is assigned by IoT Server internally. :orgKey Each organization can be assigned a unique key at a time. The Organization can re-generate :orgKey at any time. The change of :orgKey of an Org results that all devices of the Org is to be re-registered. MI JSON MI JSON format message contains the following attributes: attribute name symbol explanation action :action define action type of the JSON message. action descriptor :descriptor further descriptor for the action. data content :data-content the content body of the data field. { \":action\" : \":descriptor\" , \"data\" : \":data-content\" } Action :action explanation req Request action. It requests something defined by the action descriptor. res Response action. It response the corresponding request action. event Event submission action. It submits an event defined by the action descriptor. action descriptor originator remark req / res auth server req / res time device event counter device submit the event data . There are many different type of event data. The type is defined the data content. event bulk-counter device event message device just print the message to console. event hello device save the hello message in server. MI Details Name Protocol Originator Playload example Description auth req ws Server {req:\"auth\",data:{...}} Server requests Device to provide authentication info. auth res ws Device {res:\"auth\",data:{...}} Devices response to provide auth info. counter event get Device ./counter/:type/:device_id/:ts/:ip Device emit this event to record counter with timestamp measure event ws Device {event:\"event\",data:{...}} Device emit this event to record measures with timestamp counter event ws Device {event:\"counter\",data:{...}} Device emit this event to record counter with timestamp hello event get Device ./hello/:device_id/:ts/:ip/:message Devices emits this event when reboot/restart. hello event ws Device {event:\"hello\",data:{...}} Devices emits this event when reboot/restart. resend req post Device ./resend {data:[...]} Device re-sends all unsent events resend req ws Device {req:\"resend\",data:[...]} Device re-sends all unsent events resend res ws Server {res:\"resend\",data:{...}} Server notifies Device the result of resend. time event ws Server {event:\"time\",data:{...}} Server broadcasts server to time to all connected devices time req get Device ./time/ Device requests server time time req ws Device {req:\"time\"} Device requests server time time res ws Server {res:\"time\",data:{...}} Server responses the time request HTTP vs WS The following table summarizes the difference. Feature HTTP WS auth Y counter Y Y hello Y Y measure Y resend Y Y time request Y Y time broadcast Y remote device config Y auth WS only. Server sends auth request message as the following format: js { \"req\":\"auth\", \"data\":{ \"otp\":\"<one-time-password>\" } } After receiving the {\"req\":\"auth\"} from server, the device needs to emit auth response message to server. Otherwise the ws connection will be closed by the server. The format of the auth response message is: js { \"res\":\"auth\", \"data\":{ \"id\":\"<device-id>\", \"token\":\"<session-token>\" } } The session-token = sessionToken(device_token, data.otp) counter HTTP WS . Device emits counter event to the server to record an occurrence and the timestamp of a specify type of a counter event. HTTP : The HTTP path of the event is of the foramt: js GET http://:org-endpoint/mi/v1/:orgKey/counter/:type/:device_id/:ts/:ip The path will return a plain text ok if the request is done. WS : The format of the event message is: js { \"event\":\"counter\", \"data\":{ \"device_id\": 123456, // device internal id registered in the server \"type\":\"<counter-type>\", // operation type (injection) \"ts\":1509890989, // operation timestamp in unix epoch \"ip\":\"192.168.0.101\" // device ip } } hello HTTP WS . Device will emit hello event message to the server if the device restart/reboot. HTTP : The HTTP path of the event is of the foramt: js GET http://:org-endpint/mi/v1/:orgKeey/hello/:device_id/:ts/:ip/:message Note that the :message in this HTTP path should be Base64 formatted. WS : The format of the event message is: js { \"event\":\"hello\", \"data\":{ \"device_id\":123456, \"ts\":1509890989, // operation timestamp in unix epoch \"ip\":\"192.168.0.101\" // device ip \"message\":\"<hello-information>\" // plain text string } } Note that the :message should be in plain text. measure WS only. Device emits measure event to the server to record an measured data and the timestamp of a specify type of a measure event. WS : The format of the event message is: js { \"event\":\"measure\", \"data\":{ \"device_id\": 123456, // device internal id registered in the server \"type\":\"acceleration\", // operation type (injection) \"ts\":1509890989, // operation timestamp in unix epoch \"ip\":\"192.168.0.101\" // device ip \"measure_x\":4, \"measure_y\":21, \"measure_z\":200, } } resend HTTP WS . HTTP : Post the resend data to the path: js POST http://:org-endpoint/mi/v1/:orgKey/resend The format of data body of the POST request is: js { data:[ <array-of-event-message>] } An example of the `array-of-event-message`: [ { \"event\":\"counter\", \"data\":{ \"device_id\":123456, // device physical id \"type\":\"arm\", // operation type (robot arm) \"ts\":1509890989, // operation timestamp in unix epoch \"ip\":\"192.168.0.101\" // device ip } },{ \"event\":\"counter\", \"data\":{ \"device_id\":123456, // device physical id \"type\":\"arm\", // operation type (robot arm) \"ts\":1509891990, // operation timestamp in unix epoch \"ip\":\"192.168.0.101\" // device ip } } ] When resend request is processed, the server will response a plain text ok . WS : The format of the resend request message is: js { \"req\":\"resend\", \"data\":[<array-of-event-message>] } array-of-event-message is the same as those in HTTP POST. After processing the resend request, the server will send resend response message to the device to notify the result. the response format is: js { \"res\":\"resend\", \"data\":{ \"ok\":true } } time broadcast WS only. Server may send the server time to all connected devices. the time event message is as the following format: js { \"event\":\"time\", \"data\":{ \"ts\":<time> } } time request HTTP WS . The device may request server time for time adjustment regularly. Note that the time value returned by this time request is in UNIX epoch. HTTP : js GET http://:org-endpoint/mi/v1/:orgKey/time The response of this path is the the time value in plaintext. WS : The time request message format is: js { \"req\":\"time\" } The server will send a time response message to the Device. The format is: js { \"res\":\"time\", \"data\":{ \"ts\":<time> } } CoreBus coreBus module provides three main methods: coreBus.on(eventName, coreBusHandler) where coreBusHandler has the signature (data, ctx, cb) coreBus.emit(eventName, data, ctx, cb) ctxReturn(error, data, ctx, cb) Bus Event Naming Machine Interface, no matter it is via HTTP or WS, will reach the mi-* coreBus events. The following is going to be redesigned. CoreEventBus (EventEmitter) has the following setting: { \"event\" : \"injection\" , \"type\" : \"database\" , \"handler\" : function ( data ){ let sql = `INSERT INTO operations (server_ts, device_id, op_ip, op_ts, op_type) VALUES(?,?,?,?,?)` ; db . run ( sql , [ serverTs , chipId , ip , ts , op_type ], function ( err ) { if ( err ) { console . log ( 'err on /record/0/..' , err . message ); CoreEventBus . emit ( 'post-injection' ,{ error : err }); } console . log ( `A row has been inserted with rowid ${ this . lastID } ` ); dbUpdateOperationsByRowId ( this . lastID ); CoreEventBus . emit ( 'post-injection' ); }); } } General Operations Devices have to be registered in IoT Server before any communication. Devices registration must be performed by a user account. In Device Registration, a device is assigned to one Work Unit (machine or production line etc.) and one or more events to submit to the server. Device start up Device starts Program loaded start to work recording events If network is working, response server auth request. If network is working and auth responded, if unsent messages exists then submit resend request If network is working and auth responded, send directly events to server Connecting to Wifi or internet Indexing of the database I find indexing need with where clause analysis. lib\\util.js - function createSelectSQL - any table _id - any table orgs lib\\wss.js - function sql_selectOrgsByOrgKey - select * from orgs where orgKey = ? - wss - select * from devices where _id=? and token=? .\\routers\\data-classes.js - coreBus.on('data-orgs-classes',(data,ctx,cb)=>{ - let sql = select * from classes where orgs=? ./routers/data-devices.js - router.param('device_id',function(req,res,next,val){ - let sql = select * from devices where _id=? - coreBus.on('data-orgs-device-update',(data,ctx)=>{ - let sql = update devices set type=?, usage=?, description=?, max_machine=?, status=?, who=?,ts=? where _id = ? - coreBus.on('data-orgs-device-new-token',(data,ctx)=>{ - let sql = update devices set token = ?, tokenTs = ? where _id = ? ./routers/data-logins.js - const sql_selectLoginsByUid = admin.prepare( - select * from logins where uid=? ./routers/data-machines.js - router.param('device_id',function(req,res,next,val){ - let sql = select * from devices where _id=? - coreBus.on('data-orgs-machines-current-status',(data,ctx,cb)=>{ - where op_ts > strftime('%s','now') - ${s5m} -- within 5min - where op_ts > strftime('%s','now') - ${s1h} -- within 1hr - coreBus.on('data-orgs-machine-update',(data,ctx)=>{ - let sql = update machines set - code =?, name =?, class =?, spec =?, status =?, type =?, location =?, bound =?, cum_count=?, wo=?, product=?, mold=?, target=?, who=?, ts=? where _id = ? - coreBus.on('data-orgs-machine-work-status-update',(data,ctx)=>{ - let sql = update machines set wo=?, product=?, mold=?, target=?, status=?, who=?, ts=? where _id=? ./routers/data-me.js - coreBus.on('data-me-update',(data,ctx)=>{ - let sql = 'update logins set name=?, mobile=?, tz=?, who=?, ts=? where _id=?' - coreBus.on('data-me-change-password',(data,ctx)=>{ - let sql = update logins set pwd=?, who=?, ts=? where _id = ? - coreBus.on('data-me-orgs',(data,ctx)=>{ - let sql = select a.*, b.roles from orgs a inner join orgs_logins b on a._id = b.orgs where b.logins =? ; ./routers/data-orgs.js - coreBus.on('data-org-update',(data,ctx)=>{ - let sql = update orgs set name=?, sn=?, tz=?, who=?, ts=? where _id=? - const sql_updateOrgsOrgKeyById = admin.prepare( - update orgs set orgKey = ?, orgKeyTs = ? where _id=? ./routers/data-units.js - router.param('device_id',function(req,res,next,val){ - let sql = select * from devices where _id=? - router.param('machine_id',(req,res,next,val)=>{ - let sql = select * from machines where _id = ? - coreBus.on('data-orgs-unit',(data,ctx)=>{ - let sql = select * from units where _id=? and orgs=? - coreBus.on('data-orgs-units-of-device',(data,ctx,cb)=>{ - let sql = select uu.* , m.class, d.physical_id,m.wo, m.product,m.target,m.mold,m.code as machine$code ,m.type as machine$type from units u left join units uu on u.headers = uu.headers left join machines m on uu.machines = m._id left join devices d on uu.devices = d._id where u.devices = ? and u.orgs=? - coreBus.on('data-orgs-units-of-machine',(data,ctx,cb)=>{ - let sql = select uu.* , m.class, d.physical_id from units u left join units uu on u.headers = uu.headers left join machines m on uu.machines = m._id left join devices d on uu.devices = d._id where u.machines = ? and u.orgs=? - coreBus.emit('data-orgs-units-of-machine',{id:data.machine},ctx,(er,unit1)=>{ - let sql2 = update units set devices = ?, op_type=? where _id = ? - let sql = update units set headers=? where headers=? ./routers/mi.js - coreBus.on('db-update-operations-by-row-id',(data,ctx,cb)=>{ - let sql = select * from v_operations where rowId=? - coreBus.on('db-update-operations-by-row-id',(data,ctx,cb)=>{ - let sql2 = select * from ( select 'prev' [rowType], rowId, * from operations where orgs = ? and op_ts < ? and devices=? and op_type=? order by op_ts desc limit 1 ) union select * from ( select 'next' [rowType], rowId, * from operations where orgs = ? and op_ts > ? and devices=? and op_type=? order by op_ts limit 1 ) ; - updatePrevSQL = update operations set cycle_tm = ${thisRow.op_ts - prevRow.op_ts} where rowId=${prevRow.rowId} - updateThisSQL = update operations set ${setThisClause} where rowId=${data.rowId} - coreBus.on('db-update-measures-by-row-id',(data,ctx,cb)=>{ - let sql = select mm.* from measures m inner join units u on m.orgs = u.orgs and m.devices = u.devices and m.op_type = u.op_type left join machines mm on u.orgs = mm.orgs and u.machines = mm._id where m.rowId = ? - function patchMachineInformation(rowId,tableName,fieldName,ctx){ - let sql2 = update ${tableName} set ${fieldName}='${machine_id}' where ROWID = ${rowId} ; - const sql_selectOrgsByOrgKey = admin.prepare( - select * from orgs where orgKey = ? ./routers/pdata.js - coreBus.on('reset-password',(data,ctx,cb)=>{ - let sql = update logins set reset_pwd_token = ?,reset_pwd_ts = ? where _id = ? - sql_selectLoginsByUid = admin.prepare( - select * from logins where uid=? , - let sql_selectLoginsByEmail = admin.prepare( - select * from logins where email=? ) mIoT This is about mobile app api design. The mIoT is mainly a on-site tool to work with QR Code labels sticked on devices, machines or location etc. The users don't need to go back to web portal on PCs to do some recording activities. System should be able to manage the following activities: The number of mIoT mobiles connecting to the Server. The number of operators using the mIoT. Design: mIoT can be used solely by a registered user of IoT. mIoT can be used for operators of a specific org. mIoT has a setup registration record in the App. mIoT for a registered user of IoT Server: the mIoT impersonates as the user mIoT for operators of an org: the mIoT is registered under an org, as an asset of the org. the operation in the mIoT requires the operator to provide password to perform. Table design: Table: data.mobiles to keep the register mobile devices installed mIoT (fields \"orgs\" or \"logins\" to ) Table: data.operators to keep the operators list of an org. Registration data: config : { _id : token : endpoint : protocol : ts : } user : logins . _id userSetting : btoa ( token ) DI API: /sign-in-miot/ {device_id,} Bugs & Todo The bugs are found here: Prepared Select statement return cached old result even after update of the data. Eg. sql_selectLoginsByUid . Todo are here: Indexing the database to improve the performance. Moving of operation and measure records to some kind of log table. Provide user interface for creating/editing machines, assignment of device to machines, work status of Machine. Review the dashboard styling based on Samson's comment. Complete the TOOLv1 OTA update of LFS library of devices. 3-Axis Algorithm to count the action of robot-arm.","title":"IoT Server APIs"},{"location":"api/#iot-server-apis","text":"This document is to describe the design of iot server version 2. This is a big change to the whole design from database to interface (API).","title":"IoT Server APIs"},{"location":"api/#databases","text":"Version 2 design introduce the following databases changes: New admin.db to maintain the organization and logins information. Support more than one data.db (the old name is test.db). Redesign of the table schema.","title":"Databases"},{"location":"api/#naming-convention","text":"Table name is in norn plural form. Table name is in lower case and separated by underscore _ . Field _id in a table is the unique identity key of the record in the table. Field cwho in a table is the id of creation login of the record. Field cts in a table is the timestamp ( js ) of creation of the record. Field who in a table is the id of modification login of creation of the record. Field ts in a table is the timestamp ( js ) of modification of the record. Field sdate in a table is the shift date (\u73ed\u6b21\u65e5\u671f) of the record. If a field name is the same as a table name x , it is referencing to the _id of the table of x .","title":"Naming Convention"},{"location":"api/#admindb","text":"","title":"admin.db"},{"location":"api/#logins","text":"field description remark _id The internal id of the login record type The type of login super uid The user id or account code of the login pwd The encrypted user password pwds Internal use salt The salt of the user name The natural name of user email The email of the user mobile The mobile of the user tz The default timezone of the user. Default is 8. ts The ts of the creation/change of the record status The status of the user newly-created , .. reset_pwd_token The token of reset password request reset_pwd_ts The ts of reset password token","title":"logins"},{"location":"api/#orgs","text":"field description remark _id The internal id of the org record name The name of the org sn The short name of the org tz The timezone of org. It's default value is the tz of owner owner The owner of the org. ref to logins._id type The type of the org. personal , basic status The status of the org. newly-created , removed dataStore The name of the data store system internal assigned orgKey The orgKey of the org orgKeyTs The ts of the generation/change of orgKey ts the ts of the change of the record","title":"orgs"},{"location":"api/#orgs_logins","text":"field description remark _id The internal id of this record orgs The id of the orgs ref to orgs._id logins The id of the logins ref to logins._id roles The role of the login in the org owner , viewer who The id of the user who create/change this record ref to logins._id status The status of this relationship enable , disabled ts The ts of the record","title":"orgs_logins"},{"location":"api/#restrictions","text":"field description remark _id The internal id of this record orgs The id of the orgs ref to orgs._id logins The id of the logins ref to logins._id role The role of the login have any restriction rules A JSON data to control what data should be be restricted. who The id of the user who create/change this record ref to logins._id ts The ts of the record","title":"restrictions"},{"location":"api/#datadb","text":"","title":"data.db"},{"location":"api/#table-devices","text":"new old description change remark _id ID The internal id of the device record Type change to CHAR. orgs The id of org the device belongs to ref to orgs._id physical_id device_id The chip id (nodemcu) or physical device id. It is read from device usage usage The usage description of the device token The device token tokenTs The timestamp of the creation of device token type Type of the device virtual-device status Status of the device enabled , disabled description The description of the device max_machine max_machine The max number of machine can be assigned to the device. who The id of user who create/change this record ref to logins._id ts The ts of the record","title":"table devices"},{"location":"api/#table-handlers","text":"Since 2019-09-06 This is to define the event data handler . new old description change remark orgs The id of org the handler belongs to ref to orgs._id _id The internal id of the handler record code The code of the handler. code = counter is reserved. name The name of the handler. process_type The process type the handler. Process Type let system know how to process (logic) the event data received. counter , on , off are its valid value. remark Any user remarks. who The id of login who change the record ref to logins._id ts The ts of the record changed cwho The id of login who create the record ref to logins._id cts The ts of the record created","title":"table handlers"},{"location":"api/#table-hello","text":"|new|old|description| change remark| |--|--| |orgs| | The id of org the device belongs to | ref to orgs._id | |server_ts|server_ts|The server ts of the record| |devices |device_id | The device internal id| Type change to CHAR.| |op_ip|op_id| The ip of the device | |op_ts|op_ts| The ts of the hello message | Unix epoch | |message|message| The hello message(information) containing the device id, circuit type, start reason etc.| |machines| machine_id| The internal id of the machine the device is assigned.| ref to machines._id |","title":"table hello"},{"location":"api/#table-machines","text":"|new|old|description| change remark| |--|--| |orgs| | The id of org the machine belongs to | ref to orgs._id | |_id| ID | The internal id of the machine record | Type change to CHAR| |code| code| The code of the machine for daily usage or reference to its id in other system. |name| name| The name of tha machine| |type | type| The type of the machine| |class| class| The class of the machine. A class is a group of machines.| |spec| spec| The spec description of the machine.| |status|status| The current scheduled (planned) status of the machine| schedule_on , schedule_off , schedule_maint , disabled | |location|location | The location description where the machine is located. It can be a Map name. | |bound| | The bound data (x,y,w,h) of the machine in a map if the location is a map name. | |cum_count|cum_count| The cumulative count of the machine | |wo|wo| The current work order (production order, mo etc) the machine is working for.| This is a work status info| |product|product| The current product (part etc) the machine is working for.| This is a work status info| |mold|mold| The mold (or assistant tools) the machine is equipped. | This is a work status info| |target| target |The current target of cycle time of the machine| This is a work status info| |who| | The id of login who change the record | ref to logins._id |ts| | The ts of the record |","title":"table machines"},{"location":"api/#table-operations","text":"|new|old|description| change remark| |--|--| |orgs| | The id of org the record belongs to | ref to orgs._id | |server_ts|server_ts| The server ts of the record | |devices| device_id| The device which emits this record | Type change to CHAR| |op_ts| op_ts | The ts of the record from device |op_ip| op_ip | The ip of the device | |op_type|op_type| The type of the event| |cycle_tm|cycle_tm| The cycle time of the record. It is the time difference form the next record of the same org, same device, the same type | |machines|machine_id| The id of the machine of the device | |machines_wo| machine_wo | The copied value of wo of the machine of the device| ref to machines.wo | |machines_product| machine_product | The copied value of product of the machine of the device| ref to machines.product | |machines_mold| machine_mold | The copied value of mold of the machine of the device| ref to machines.mold | |machines_target| machine_target | The copied value of target of the machine of the device| ref to machines.target |","title":"table operations"},{"location":"api/#table-measures","text":"|new|old|description| change remark| |--|--| |orgs| | The id of org the record belongs to | ref to orgs._id | |server_ts|server_ts| The server ts of the record | |devices| device_id| The device which emits this record | Type change to CHAR| |op_ts| op_ts | The ts of the record from device |op_ip| op_ip | The ip of the device | |op_type|op_type| The type of the event| |cycle_tm|cycle_tm| The cycle time of the record. It is the time difference form the next record of the same org, same device, the same type | |machines|machine_id| The id of the machine of the device | |machines_wo| machine_wo | The copied value of wo of the machine of the device| ref to machines.wo | |machines_product| machine_product | The copied value of product of the machine of the device| ref to machines.product | |machines_mold| machine_mold | The copied value of mold of the machine of the device| ref to machines.mold | |machines_target| machine_target | The copied value of target of the machine of the device| ref to machines.target | |measure_x | | The x data of measure.| |measure_y | | The y data of measure.| |measure_z | | The z data of measure.| |measure_d1 | | The d1 data of measure.| |measure_d2 | | The d2 data of measure.| |measure_d3 | | The d3 data of measure.| |measure_c1 | | The c1 data of measure.| |measure_c2 | | The c2 data of measure.| |measure_c3 | | The c3 data of measure.|","title":"table measures"},{"location":"api/#table-shifts","text":"|new|old|description| change remark| |--|--| |_id| | The internal id of the shift| |orgs| | The id of org the shifts belongs to | ref to orgs._id | |class|class| The class of the shifts belongs to | | |code |code | The code the shift. It can be reference to a short code or id from other system.| |name |name | The name of the shift | |effective_from | effective_from | The start date of the the shift (inclusive)| |effective_till | effective_till | The till date of the the shift (inclusive)| |tz| timezone | The timezone value of the shift. It should be copied from the tz value of the organization. | |start|start | The start time string of the shift in 24 hours format HH:MM .| |hr| length_hr| The number of hours of the shift. It can be decimal (e.g. 4.5). using start and hr to determine the shift end time|","title":"table shifts"},{"location":"api/#table-units_headers","text":"|new|old|description| change remark| |--|--| |_id| | |The internal id of this units header| |name | |The name of the header | |who| | The id of user create / change the record | |ts | | The ts of this record |","title":"table units_headers"},{"location":"api/#table-units","text":"|new|old|description| change remark| |--|--| |_id| ID |The internal id of this record| Type change to CHAR |headers| |The id of unit header | ref to units_headers._id | |machines| machine_id | The id of the machine attached | ref to machines._id | |devices| device_id | The id of the device attached | ref to devices._id | |status| | The status of the record | enabled , disabled |","title":"table units"},{"location":"api/#view-v_current_shifts","text":"","title":"view v_current_shifts"},{"location":"api/#interfaces","text":"This document is to describe the design of iot server machine interface version 2. The big change of this version of the api is to introduce version label in the api support both HTTP / Websocket protocols support multiple organization in one server introduce authentication of DI. As the previous version, there are still 3 major types of interfaces interacted with users and devices. MI - machine interface DI - data interface UI - user interface","title":"Interfaces"},{"location":"api/#di","text":"Most of the data communication between client and server is via Data Interface (DI). Protocol DI is working under HTTP protocol. General Endpoint The general endpoint is http://:org-endpoint/ suffixed by additional DI path of specific DI functions. General Response The general format of response of DI is {error, data} . If there is an error, there is an error value, otherwise the error is null or empty. If there is any data return, data may be array or object. It is implemented centrally in ctxReturn in core-bus.js in this version. DI Paths method DI path description GET ./data/v1/ The api endpoint of the version 1 (protected api) GET ./pdata/v1/ The api endpoint of the version 1 (public api) POST ./pdata/v1/reset-password submit to reset-password process POST ./pdata/v1/sing-on submit to sign-on process POST ./pdata/v1/sing-in submit to sign-in process POST ./pdata/v1/verify-reset-password submit to verify the reset-password token GET ./data/v1/me return the signed-in user info POST ./data/v1/me submit to change the signed-in user info POST ./data/v1/me/change-password submit to change the signed-in user password GET ./data/v1/me/orgs return the list of orgs the user is able to access POST ./data/v1/me/sign-off submit to sign-off process GET ./data/v1/orgs return the list of orgs the user is able to access GET ./data/v1/orgs/:org_id return the org data of the :org_id POST ./data/v1/orgs/:org_id submit to change the org data of the :org_id POST ./data/v1/orgs/:org_id/clear-org-key submit to clear the orgKey of the org POST ./data/v1/orgs/:org_id/new-org-key submit to generate a new orgKey of the org GET ./data/v1/orgs/:org_id/devices return the list of devices of the org :org_id PUT ./data/v1/orgs/:org_id/devices submit to register a new devices of the org :org_id GET ./data/v1/orgs/:org_id/devices/:device_id return data of the device :device_id of the org :org_id POST ./data/v1/orgs/:org_id/devices/:device_id submit to change the data of device :device_id of the org :org_id POST ./data/v1/orgs/:org_id/devices/:device_id/new-token submit to create new token of device :device_id of the org :org_id GET ./data/v1/orgs/:org_id/logins return the list of logins of the org :org_id PUT ./data/v1/orgs/:org_id/logins submit to create a new member login of the org :org_id GET ./data/v1/orgs/:org_id/machines return the list of machines of the org :org_id PUT ./data/v1/orgs/:org_id/machines submit to add a new machine of the org :org_id GET ./data/v1/orgs/:org_id/machines/:machine_id return the data of machine :machine_id of the org :org_id POST ./data/v1/orgs/:org_id/machines/:machine_id submit to change the data of machine :machine_id of the org :org_id POST ./data/v1/orgs/:org_id/machines/:machine_id/work-status submit to change the work status data of machine :machine_id of the org :org_id GET ./data/v1/orgs/:org_id/shifts return the list of shifts of the org :org_id GET ./data/v1/orgs/:org_id/units return the list of all units of the org :org_id GET ./data/v1/orgs/:org_id/units/:unit_id return the unit record of :unit_id of the org :org_id PUT ./data/v1/orgs/:org_id/units submit to create a new unit record of the org :org_id DELETE ./data/v1/orgs/:org_id/units/:unit_id submit to remove the new unit record :unit_id of the org :org_id GET ./data/v1/orgs/:org_id/units/of/device/:device_id return a list of units associated with the device :device_id of the org :org_id PUT ./data/v1/orgs/:org_id/units/of/device/:device_id/machine/:machine_id submit to associate device :device_id with machine :machine_id of org :org_id PUT ./data/v1/orgs/:org_id/units/of/devices/:device_id/:device2_id submit to associate two devices :device_id and :device2_id of org :org_id GET ./data/v1/orgs/:org_id/units/of/machine/:machine_id return a list of units associated with the machine :machine_id of the org :org_id PUT ./data/v1/orgs/:org_id/units/of/machine/:machine_id/device/:device_id submit to associate device :device_id with machine :machine_id of the org :org_id PUT ./data/v1/orgs/:org_id/units/of/machines/:machine_id/:machine2_id submit to associate two machines :machine_id and :machine2_id of the org :org_id GET ./data/v1/orgs/:org_id/_/t/:table generic selection api for a single table/view GET ./data/v1/orgs/:org_id/_/t/:table/:id generic selection api for a single table/view POST ./data/v1/orgs/:org_id/_/q generic sql runner api (only for development)","title":"DI"},{"location":"api/#di-details","text":"","title":"DI Details"},{"location":"api/#reset-password","text":"POST ./pdata/v1/reset-password . body: {email} This DI only supports reset by providing the login email. This DI will trigger back-end process to generate a reset-password-token and submit an email to the email .","title":"reset-password"},{"location":"api/#sign-on","text":"POST ./pdata/v1/sign-on . body: { name, pwds, email, mobile, uid} This DI will submit request to server to create a new login. name , pwds , email are mandatory. mobile and uid are optional. If no uid , email will be the uid . If the process success, it will return the me object of the sign-on user. But it will NOT automatically sign in. sing-on process will also create personal org in back-end.","title":"sign-on"},{"location":"api/#sign-in","text":"POST ./pdata/v1/sign-in . body: { uid, pwds } This DI will submit request to server to sign in. If the process success, it will return the {data:{ok:true}} object. Otherwise it returns {error:\"<error>\"} object.","title":"sign-in"},{"location":"api/#verify-reset-password","text":"POST ./pdata/v1/verify-reset-password . body: {email, reset_pwd_token} This DI is to verify the reset-password-token by providing the login email. If the process success, it will return the {data:{ok:true}} object.","title":"verify-reset-password"},{"location":"api/#me","text":"GET ./data/v1/me . This DI is to get the signed-in user info. No params is required. POST ./data/v1/me . body: {name, mobile, tz} This DI is to update the signed-in user info. All the params are optional. If pwds is changed, back-end will send an email to notify the email owner. If email changed, back-end will send an email to notify the original email address owner. POST ./data/v1/me/change-password . body : {pwdo, pwds} This DI is to change the password of the signed-in user. If the process success, it will return {data:{ok:true}} . GET ./data/v1/me/orgs This DI is to get the list of orgs which the signed-in user is able access. No params is required. The each record in the list of orgs has a field roles to indicate the role of the signed-in user of the org.","title":"me"},{"location":"api/#sign-off","text":"POST ./data/v1/me/sign-off . This DI is to submit to process a sign-off process. No params is required. After process, the server will response {data:{ok:true}} object.","title":"sign-off"},{"location":"api/#orgs_1","text":"GET ./data/v1/orgs . This DI is to get the list of orgs which the signed-in user is able access. No params is required. Same as ./data/v1/me/orgs . GET ./data/v1/orgs/:org_id . This DI is to get the data of a specific org of :org_id POST ./data/v1/orgs/:org_id . Body: {name,sn,tz} This DI is to submit a change of the data of the org :org_id .","title":"orgs"},{"location":"api/#clear-org-key","text":"POST ./data/v1/orgs/:org_id/clear-org-key . This DI is to submit to clear the orgKey of the org :org_id","title":"clear-org-key"},{"location":"api/#new-org-key","text":"POST ./data/v1/orgs/:org_id/new-org-key . This DI is to generate a new orgKey of the org :org_id","title":"new-org-key"},{"location":"api/#devices","text":"GET ./data/v1/orgs/:org_id/devices . This DI is to get the list of all devices of the org :org_id . This DI supports filter query . PUT ./data/v1/orgs/:org_id/devices . Body: { physical_id, usage, type, description, max_machine } This DI is to submit to register a new device of the org :org_id . physical_id is mandatory. others are optional. type will be '' if it is not 'virtual-device'. max_machine is default to 1. If process is success it will return a device data object with at least the assigned _id and token fields. The register program has to write the _id and token back to the device, otherwise the device may not be able to connect to the server. GET ./data/v1/orgs/:org_id/devices/:device_id . This DI is to get the data of the device :device_id of the org :org_id . No token of devices will be shown in this DI. POST ./data/v1/orgs/:org_id/devices/:device_id . Body: { usage , status, description, max_machine, type} This DI is to submit to change the data of device :device_id of org :org_id . It will return new device object if success. POST ./data/v1/orgs/:org_id/devices/:device_id/new-token . This DI is to submit to create a new device token of device :device_id . This DI will then return the object: { _id, token ,tokeTs} . The register program has to write the newly created token back to the device.","title":"devices"},{"location":"api/#logins_1","text":"GET ./data/v1/orgs/:org_id/logins . This DI is to get the list of the logins of the org :org_id . PUT ./data/v1/orgs/:org_id/logins . Body: {uid, pwds, name, email, mobile,roles} . This DI is to submit to create a new member login of org. The member created with this DI is a member login of the org. uid , pwds and roles are mandatory. Others are optional.","title":"logins"},{"location":"api/#machines","text":"GET ./data/v1/orgs/:org_id/machines . This DI is to get the list of machines of the org :org_id . This DI supports filter query . GET ./data/v1/orgs/:org_id/machines/:machine_id . This DI is to get the data of the machine :machine_id of org :org_id PUT ./data/v1/orgs/:org_id/machines . Body: { code, name, class, spec, status, type, location, bound, cum_count, wo, product, mold, target } . This DI is to submit to register a new machine of the org :org_id . If process is success it will return a machine data object with the assigned _id field. POST ./data/v1/orgs/:org_id/machines/:machine_id . This DI is to submit to change the machine :machine_id of the org :org_id . The Post body is: js { code, name, class, spec, status, type, location, bound, cum_count, wo, product, mold, target } If process is success it will return a machine data object. POST ./data/v1/orgs/:org_id/machines/:machine_id/work-status . This DI is to submit to change the work status data of device :device_id . The Post body is: js { wo, product, mold, target , status} All params are optional. This DI will then return the object {ok:true} if success.","title":"machines"},{"location":"api/#shifts","text":"GET ./data/v1/orgs/:org_id/shifts . This DI is to get the list of shifts data of orgs :org_id . GET ./data/v1/orgs/:org_id/shifts/:shift_id . This DI is to get the data of the shift :shift_id of the org :org_id .","title":"shifts"},{"location":"api/#di-legacy-paths","text":"There are some legacy paths used in Web User Interface (WUI or simply UI) legacy path location /data/machines-current-shift-status/injection components/Dashboard.vue /data/_q components/DatabaseDebugger.vue /data/_t/v_operations? components/DayOperations.vue /data/_t/v_operations? components/DaySummary.vue /data/_t/devices?where=device_id= components/DeviceBasic.vue /data/_t/v_operations?where= /components/HelloAnalysis.vue /data/_t/v_hello?where=device_id /components/HelloAnalysis.vue /data/_t/v_hello?where=op_type='hello' and /components/LastHello.vue /data/_t/v_operations? /components/LastOperations.vue /data/_t/machines?where=id=${this.id} /compoents/MachineBasic.vue /data/_t/machines /components/MachineOperations.vue /data/_t/operations?where=machine_id= /components/MachineOperations.vue /data/_t/v_operations?where= /components/MachinesStops.vue /data/_t/machines?where=id=${this.id} /components/MachineWorkStatus.vue /data/_t/v_operations?where= /components/Projection.vue /data/_t/oprerations /views/Debugger.vue /data/_t/devices /views/Devices.vue /data/_t/units /views/Devices.vue /data/_t/machines /views/Machines.vue /data/_t/units /views/Machines.vue /data/_t/machines /views/MachinesReport.vue /data/_t/units /views/MachinesReport.vue","title":"DI Legacy Paths"},{"location":"api/#mi-legacy-paths","text":"legacy path location \"http://\"..SERVER_DOMAIN..\"/time\" wifi.lua getServerTime() http://\"..SERVER_DOMAIN..\"/record/1/\"..DEVICE_ID..\"/\"..ip..\"/\"..sec wifi.lua sendRecord() \"http://\"..SERVER_DOMAIN..\"/record/0/\"..DEVICE_ID..\"/\"..ip..\"/\"..sec..\"/\"..m wifi.lua sendHello()","title":"MI Legacy Paths"},{"location":"api/#mi","text":"Devices are using the MI to communicate with the IoT Server. MI version 1 (v1) provides interfaces with HTTP and WebSocket (WS) protocol. Prerequisite : The Device must be registered in an Organization already before calling the MI . The Device must be enabled before calling the MI . The Organization of the Device must be set to allow collecting data from the MI . General MI Protocol (Method) General Format of API Endpoints HTTP GET http://:org-endpoint/mi/v1/:orgKey/ ... HTTP POST http://:org-endpoint/mi/v1/:orgKey WS ws://:org-endpoint/ws/v1/:orgKey/ ... Where :org-endpoint is the server endpoint of the a user or organization. It is assigned by IoT Server internally. :orgKey Each organization can be assigned a unique key at a time. The Organization can re-generate :orgKey at any time. The change of :orgKey of an Org results that all devices of the Org is to be re-registered.","title":"MI"},{"location":"api/#mi-json","text":"MI JSON format message contains the following attributes: attribute name symbol explanation action :action define action type of the JSON message. action descriptor :descriptor further descriptor for the action. data content :data-content the content body of the data field. { \":action\" : \":descriptor\" , \"data\" : \":data-content\" } Action :action explanation req Request action. It requests something defined by the action descriptor. res Response action. It response the corresponding request action. event Event submission action. It submits an event defined by the action descriptor. action descriptor originator remark req / res auth server req / res time device event counter device submit the event data . There are many different type of event data. The type is defined the data content. event bulk-counter device event message device just print the message to console. event hello device save the hello message in server.","title":"MI JSON"},{"location":"api/#mi-details","text":"Name Protocol Originator Playload example Description auth req ws Server {req:\"auth\",data:{...}} Server requests Device to provide authentication info. auth res ws Device {res:\"auth\",data:{...}} Devices response to provide auth info. counter event get Device ./counter/:type/:device_id/:ts/:ip Device emit this event to record counter with timestamp measure event ws Device {event:\"event\",data:{...}} Device emit this event to record measures with timestamp counter event ws Device {event:\"counter\",data:{...}} Device emit this event to record counter with timestamp hello event get Device ./hello/:device_id/:ts/:ip/:message Devices emits this event when reboot/restart. hello event ws Device {event:\"hello\",data:{...}} Devices emits this event when reboot/restart. resend req post Device ./resend {data:[...]} Device re-sends all unsent events resend req ws Device {req:\"resend\",data:[...]} Device re-sends all unsent events resend res ws Server {res:\"resend\",data:{...}} Server notifies Device the result of resend. time event ws Server {event:\"time\",data:{...}} Server broadcasts server to time to all connected devices time req get Device ./time/ Device requests server time time req ws Device {req:\"time\"} Device requests server time time res ws Server {res:\"time\",data:{...}} Server responses the time request","title":"MI Details"},{"location":"api/#http-vs-ws","text":"The following table summarizes the difference. Feature HTTP WS auth Y counter Y Y hello Y Y measure Y resend Y Y time request Y Y time broadcast Y remote device config Y","title":"HTTP vs WS"},{"location":"api/#auth","text":"WS only. Server sends auth request message as the following format: js { \"req\":\"auth\", \"data\":{ \"otp\":\"<one-time-password>\" } } After receiving the {\"req\":\"auth\"} from server, the device needs to emit auth response message to server. Otherwise the ws connection will be closed by the server. The format of the auth response message is: js { \"res\":\"auth\", \"data\":{ \"id\":\"<device-id>\", \"token\":\"<session-token>\" } } The session-token = sessionToken(device_token, data.otp)","title":"auth"},{"location":"api/#counter","text":"HTTP WS . Device emits counter event to the server to record an occurrence and the timestamp of a specify type of a counter event. HTTP : The HTTP path of the event is of the foramt: js GET http://:org-endpoint/mi/v1/:orgKey/counter/:type/:device_id/:ts/:ip The path will return a plain text ok if the request is done. WS : The format of the event message is: js { \"event\":\"counter\", \"data\":{ \"device_id\": 123456, // device internal id registered in the server \"type\":\"<counter-type>\", // operation type (injection) \"ts\":1509890989, // operation timestamp in unix epoch \"ip\":\"192.168.0.101\" // device ip } }","title":"counter"},{"location":"api/#hello","text":"HTTP WS . Device will emit hello event message to the server if the device restart/reboot. HTTP : The HTTP path of the event is of the foramt: js GET http://:org-endpint/mi/v1/:orgKeey/hello/:device_id/:ts/:ip/:message Note that the :message in this HTTP path should be Base64 formatted. WS : The format of the event message is: js { \"event\":\"hello\", \"data\":{ \"device_id\":123456, \"ts\":1509890989, // operation timestamp in unix epoch \"ip\":\"192.168.0.101\" // device ip \"message\":\"<hello-information>\" // plain text string } } Note that the :message should be in plain text.","title":"hello"},{"location":"api/#measure","text":"WS only. Device emits measure event to the server to record an measured data and the timestamp of a specify type of a measure event. WS : The format of the event message is: js { \"event\":\"measure\", \"data\":{ \"device_id\": 123456, // device internal id registered in the server \"type\":\"acceleration\", // operation type (injection) \"ts\":1509890989, // operation timestamp in unix epoch \"ip\":\"192.168.0.101\" // device ip \"measure_x\":4, \"measure_y\":21, \"measure_z\":200, } }","title":"measure"},{"location":"api/#resend","text":"HTTP WS . HTTP : Post the resend data to the path: js POST http://:org-endpoint/mi/v1/:orgKey/resend The format of data body of the POST request is: js { data:[ <array-of-event-message>] } An example of the `array-of-event-message`: [ { \"event\":\"counter\", \"data\":{ \"device_id\":123456, // device physical id \"type\":\"arm\", // operation type (robot arm) \"ts\":1509890989, // operation timestamp in unix epoch \"ip\":\"192.168.0.101\" // device ip } },{ \"event\":\"counter\", \"data\":{ \"device_id\":123456, // device physical id \"type\":\"arm\", // operation type (robot arm) \"ts\":1509891990, // operation timestamp in unix epoch \"ip\":\"192.168.0.101\" // device ip } } ] When resend request is processed, the server will response a plain text ok . WS : The format of the resend request message is: js { \"req\":\"resend\", \"data\":[<array-of-event-message>] } array-of-event-message is the same as those in HTTP POST. After processing the resend request, the server will send resend response message to the device to notify the result. the response format is: js { \"res\":\"resend\", \"data\":{ \"ok\":true } }","title":"resend"},{"location":"api/#time-broadcast","text":"WS only. Server may send the server time to all connected devices. the time event message is as the following format: js { \"event\":\"time\", \"data\":{ \"ts\":<time> } }","title":"time broadcast"},{"location":"api/#time-request","text":"HTTP WS . The device may request server time for time adjustment regularly. Note that the time value returned by this time request is in UNIX epoch. HTTP : js GET http://:org-endpoint/mi/v1/:orgKey/time The response of this path is the the time value in plaintext. WS : The time request message format is: js { \"req\":\"time\" } The server will send a time response message to the Device. The format is: js { \"res\":\"time\", \"data\":{ \"ts\":<time> } }","title":"time request"},{"location":"api/#corebus","text":"coreBus module provides three main methods: coreBus.on(eventName, coreBusHandler) where coreBusHandler has the signature (data, ctx, cb) coreBus.emit(eventName, data, ctx, cb) ctxReturn(error, data, ctx, cb)","title":"CoreBus"},{"location":"api/#bus-event-naming","text":"Machine Interface, no matter it is via HTTP or WS, will reach the mi-* coreBus events.","title":"Bus Event Naming"},{"location":"api/#the-following-is-going-to-be-redesigned","text":"CoreEventBus (EventEmitter) has the following setting: { \"event\" : \"injection\" , \"type\" : \"database\" , \"handler\" : function ( data ){ let sql = `INSERT INTO operations (server_ts, device_id, op_ip, op_ts, op_type) VALUES(?,?,?,?,?)` ; db . run ( sql , [ serverTs , chipId , ip , ts , op_type ], function ( err ) { if ( err ) { console . log ( 'err on /record/0/..' , err . message ); CoreEventBus . emit ( 'post-injection' ,{ error : err }); } console . log ( `A row has been inserted with rowid ${ this . lastID } ` ); dbUpdateOperationsByRowId ( this . lastID ); CoreEventBus . emit ( 'post-injection' ); }); } }","title":"The following is going to be redesigned."},{"location":"api/#general-operations","text":"Devices have to be registered in IoT Server before any communication. Devices registration must be performed by a user account. In Device Registration, a device is assigned to one Work Unit (machine or production line etc.) and one or more events to submit to the server.","title":"General Operations"},{"location":"api/#device-start-up","text":"Device starts Program loaded start to work recording events If network is working, response server auth request. If network is working and auth responded, if unsent messages exists then submit resend request If network is working and auth responded, send directly events to server Connecting to Wifi or internet","title":"Device start up"},{"location":"api/#indexing-of-the-database","text":"I find indexing need with where clause analysis. lib\\util.js - function createSelectSQL - any table _id - any table orgs lib\\wss.js - function sql_selectOrgsByOrgKey - select * from orgs where orgKey = ? - wss - select * from devices where _id=? and token=? .\\routers\\data-classes.js - coreBus.on('data-orgs-classes',(data,ctx,cb)=>{ - let sql = select * from classes where orgs=? ./routers/data-devices.js - router.param('device_id',function(req,res,next,val){ - let sql = select * from devices where _id=? - coreBus.on('data-orgs-device-update',(data,ctx)=>{ - let sql = update devices set type=?, usage=?, description=?, max_machine=?, status=?, who=?,ts=? where _id = ? - coreBus.on('data-orgs-device-new-token',(data,ctx)=>{ - let sql = update devices set token = ?, tokenTs = ? where _id = ? ./routers/data-logins.js - const sql_selectLoginsByUid = admin.prepare( - select * from logins where uid=? ./routers/data-machines.js - router.param('device_id',function(req,res,next,val){ - let sql = select * from devices where _id=? - coreBus.on('data-orgs-machines-current-status',(data,ctx,cb)=>{ - where op_ts > strftime('%s','now') - ${s5m} -- within 5min - where op_ts > strftime('%s','now') - ${s1h} -- within 1hr - coreBus.on('data-orgs-machine-update',(data,ctx)=>{ - let sql = update machines set - code =?, name =?, class =?, spec =?, status =?, type =?, location =?, bound =?, cum_count=?, wo=?, product=?, mold=?, target=?, who=?, ts=? where _id = ? - coreBus.on('data-orgs-machine-work-status-update',(data,ctx)=>{ - let sql = update machines set wo=?, product=?, mold=?, target=?, status=?, who=?, ts=? where _id=? ./routers/data-me.js - coreBus.on('data-me-update',(data,ctx)=>{ - let sql = 'update logins set name=?, mobile=?, tz=?, who=?, ts=? where _id=?' - coreBus.on('data-me-change-password',(data,ctx)=>{ - let sql = update logins set pwd=?, who=?, ts=? where _id = ? - coreBus.on('data-me-orgs',(data,ctx)=>{ - let sql = select a.*, b.roles from orgs a inner join orgs_logins b on a._id = b.orgs where b.logins =? ; ./routers/data-orgs.js - coreBus.on('data-org-update',(data,ctx)=>{ - let sql = update orgs set name=?, sn=?, tz=?, who=?, ts=? where _id=? - const sql_updateOrgsOrgKeyById = admin.prepare( - update orgs set orgKey = ?, orgKeyTs = ? where _id=? ./routers/data-units.js - router.param('device_id',function(req,res,next,val){ - let sql = select * from devices where _id=? - router.param('machine_id',(req,res,next,val)=>{ - let sql = select * from machines where _id = ? - coreBus.on('data-orgs-unit',(data,ctx)=>{ - let sql = select * from units where _id=? and orgs=? - coreBus.on('data-orgs-units-of-device',(data,ctx,cb)=>{ - let sql = select uu.* , m.class, d.physical_id,m.wo, m.product,m.target,m.mold,m.code as machine$code ,m.type as machine$type from units u left join units uu on u.headers = uu.headers left join machines m on uu.machines = m._id left join devices d on uu.devices = d._id where u.devices = ? and u.orgs=? - coreBus.on('data-orgs-units-of-machine',(data,ctx,cb)=>{ - let sql = select uu.* , m.class, d.physical_id from units u left join units uu on u.headers = uu.headers left join machines m on uu.machines = m._id left join devices d on uu.devices = d._id where u.machines = ? and u.orgs=? - coreBus.emit('data-orgs-units-of-machine',{id:data.machine},ctx,(er,unit1)=>{ - let sql2 = update units set devices = ?, op_type=? where _id = ? - let sql = update units set headers=? where headers=? ./routers/mi.js - coreBus.on('db-update-operations-by-row-id',(data,ctx,cb)=>{ - let sql = select * from v_operations where rowId=? - coreBus.on('db-update-operations-by-row-id',(data,ctx,cb)=>{ - let sql2 = select * from ( select 'prev' [rowType], rowId, * from operations where orgs = ? and op_ts < ? and devices=? and op_type=? order by op_ts desc limit 1 ) union select * from ( select 'next' [rowType], rowId, * from operations where orgs = ? and op_ts > ? and devices=? and op_type=? order by op_ts limit 1 ) ; - updatePrevSQL = update operations set cycle_tm = ${thisRow.op_ts - prevRow.op_ts} where rowId=${prevRow.rowId} - updateThisSQL = update operations set ${setThisClause} where rowId=${data.rowId} - coreBus.on('db-update-measures-by-row-id',(data,ctx,cb)=>{ - let sql = select mm.* from measures m inner join units u on m.orgs = u.orgs and m.devices = u.devices and m.op_type = u.op_type left join machines mm on u.orgs = mm.orgs and u.machines = mm._id where m.rowId = ? - function patchMachineInformation(rowId,tableName,fieldName,ctx){ - let sql2 = update ${tableName} set ${fieldName}='${machine_id}' where ROWID = ${rowId} ; - const sql_selectOrgsByOrgKey = admin.prepare( - select * from orgs where orgKey = ? ./routers/pdata.js - coreBus.on('reset-password',(data,ctx,cb)=>{ - let sql = update logins set reset_pwd_token = ?,reset_pwd_ts = ? where _id = ? - sql_selectLoginsByUid = admin.prepare( - select * from logins where uid=? , - let sql_selectLoginsByEmail = admin.prepare( - select * from logins where email=? )","title":"Indexing of the database"},{"location":"api/#miot","text":"This is about mobile app api design. The mIoT is mainly a on-site tool to work with QR Code labels sticked on devices, machines or location etc. The users don't need to go back to web portal on PCs to do some recording activities. System should be able to manage the following activities: The number of mIoT mobiles connecting to the Server. The number of operators using the mIoT. Design: mIoT can be used solely by a registered user of IoT. mIoT can be used for operators of a specific org. mIoT has a setup registration record in the App. mIoT for a registered user of IoT Server: the mIoT impersonates as the user mIoT for operators of an org: the mIoT is registered under an org, as an asset of the org. the operation in the mIoT requires the operator to provide password to perform. Table design: Table: data.mobiles to keep the register mobile devices installed mIoT (fields \"orgs\" or \"logins\" to ) Table: data.operators to keep the operators list of an org. Registration data: config : { _id : token : endpoint : protocol : ts : } user : logins . _id userSetting : btoa ( token ) DI API: /sign-in-miot/ {device_id,}","title":"mIoT"},{"location":"api/#bugs-todo","text":"The bugs are found here: Prepared Select statement return cached old result even after update of the data. Eg. sql_selectLoginsByUid . Todo are here: Indexing the database to improve the performance. Moving of operation and measure records to some kind of log table. Provide user interface for creating/editing machines, assignment of device to machines, work status of Machine. Review the dashboard styling based on Samson's comment. Complete the TOOLv1 OTA update of LFS library of devices. 3-Axis Algorithm to count the action of robot-arm.","title":"Bugs &amp; Todo"},{"location":"app-server-checklist/","text":"App Server Checklist 2019-11-19 There are some pre-requisite for running ZIOT app server in Production. Ubuntu 17.x NVM 0.31.x or above PM2 3.0 or above Node 8.x SQlite3 3.15.x or above The following are some hints to check if the above software are running and what version of them. Ubuntu lsb_release -a NVM nvm --version PM2 pm2 --version Node npm --versions SQLite3 sqlite3 --version","title":"Checklist"},{"location":"app-server-checklist/#app-server-checklist","text":"2019-11-19 There are some pre-requisite for running ZIOT app server in Production. Ubuntu 17.x NVM 0.31.x or above PM2 3.0 or above Node 8.x SQlite3 3.15.x or above The following are some hints to check if the above software are running and what version of them.","title":"App Server Checklist"},{"location":"app-server-checklist/#ubuntu","text":"lsb_release -a","title":"Ubuntu"},{"location":"app-server-checklist/#nvm","text":"nvm --version","title":"NVM"},{"location":"app-server-checklist/#pm2","text":"pm2 --version","title":"PM2"},{"location":"app-server-checklist/#node","text":"npm --versions","title":"Node"},{"location":"app-server-checklist/#sqlite3","text":"sqlite3 --version","title":"SQLite3"},{"location":"basebox/","text":"Basebox 2019-11-19 Basebox, aka WiFi \u677f or IoT Device, is a physical device attached to a machine to receive the desired signal(s) from the machine. Basebox \u53ef\u5206\u70ba\u786c\u4ef6\u90e8\u4efd\u53ca\u8edf\u4ef6\u90e8\u4efd \u786c\u4ef6\u90e8\u4efd \u786c\u4ef6\u90e8\u4efd\u5148\u4ee5 \u90e8\u4ef6\u4ee3\u865f \u4f86\u8868\u793a\u53ef\u7528\u7684\u7d44\u4ef6\uff0c\u4ee5\u4fbf\u4ee5\u5f8c\u4f7f\u7528\u3002 \u90e8\u4ef6\u4ee3\u865f \u9ede\u64ca\u4e0b\u8868\u7684 \u90e8\u4ef6\u4ee3\u865f \u53ef\u4ee5\u6aa2\u8996\u6709\u95dc\u90e8\u4ef6\u53c3\u8003\u5167\u5bb9\u3002 \u90e8\u4ef6\u4ee3\u865f \u4e2d\u6587\u540d English Spec CAB 3\u82af\u5c4f\u853d\u4fe1\u53f7\u7ebf 3*0.2\u5e73\u65b9 CAS \u4eea\u8868\u76d2 \uff08\u900f\u660e\u76d6\uff09 Case \u5c3a\u5bf8\uff1a85x58x33 CN \u63a5\u7ebf\u7aef\u5b50 Connector CN/F \u7247\u5f62\u63a5\u7ebf\u7aef\u5b50 1.25-10MM CN/U U\u578b\u63a5\u7ebf\u7aef\u5b50 3.2mm FHR \u55ae\u6392\u6392\u91dd\u6bcd\u5ea7(\u76f4\u91dd) Female Header Receptacles - Single Row \u84dd\u8272 \u9488\u95f4\u8ddd\uff1a2.54MM 1x40P HST \u70ed\u7f29\u7ba1 Heat-shrink tubing \u76f4\u5f842.5MM HST/R \u7ea2\u8272\u70ed\u7f29\u7ba1 \u76f4\u5f84 5MM HST/B \u9ed1\u8272\u70ed\u7f29\u7ba1 \u76f4\u5f84 5MM HST/T \u900f\u660e\u70ed\u7f29\u7ba1 \u76f4\u5f84 15.4MM MCU NodeMCU \u5f00\u53d1\u677f (ESP8266m \u5e26CH340\u6a21\u5757\uff09 NodeMCU DevKit (ESP8266) ESP8266, CH340 OC \u5149\u8026\u9694\u79bb\u6a21\u5757 Optical Coupler Module OC/12V/3V3/NPN \u5149\u8026\u9694\u79bb\u6a21\u5757 Optical Coupler Module 12Vin, 3V3out, NPN OC/24V/3V3/PNP \u5149\u8026\u9694\u79bb\u6a21\u5757 Optical Coupler Module 24Vin, 3V3out, PNP PCB \u53cc\u9762\u73bb\u7ea4\u4e07\u80fd\u677f \u5c3a\u5bf8\uff1a4x6MM UPS Micro USB \u706b\u725b+\u5e26\u5f00\u5173\u6570\u636e\u7ebf Micro USB power supply \u8f93\u51fa\u7535\u538b5V \u8f93\u51fa\u7535\u6d413A + \u5e26\u5f00\u5173\u6570\u636e\u7ebf UXL USB \u5ef6\u957f\u7ebf\u516c\u5bf9\u6bcd \u9ed1\u8272 \u5706\u7ebf \u957f\u5ea63M \u7d44\u4ef6\u5927\u81f4\u4e0a\u53ef\u5206\u70ba\u4ee5\u4e0b\u5206\u7d44: \u5206\u7d44\u540d\u7a31 \u90e8\u4ef6\u4ee3\u865f \u5099\u8a3b \u4f9b\u96fb Power Supply UPS , UXL \u8996\u4e4e\u96fb\u6e90\u4f4d\u7f6e\u8207\u8ddd\u96e2 , \u57fa\u672c\u4e0a\u4e00\u81f4 \u8655\u7406\u5668 Process Unit MCU \u57fa\u672c\u4e0a\u4e00\u81f4 \u5916\u63a5\u96fb\u8def External Circuit CAB, CN, FHR, PCB, HST, OC \u8996\u4e4e MCU \u7684\u8edf\u4ef6\u53ca\u6a5f\u5668\u8a0a\u865f\u6e90\u800c\u90e8\u4ef6\u53ef\u80fd\u6709\u5225 \u5916\u6bbc Case CAS \u57fa\u672c\u4e0a\u4e00\u81f4 \u8edf\u4ef6\u90e8\u4efd \u8edf\u4ef6\u90e8\u4efd\u662f\u6307\u5b89\u88dd\u5728 MCU \u4e0a\u7684\u4e00\u7d44\u7a0b\u5f0f\u3002 \u8edf\u4ef6\u540d\u7a31 \u5099\u8a3b MOS The core firmware burnt in the MCU Base Library The library contains the common functions Scripts and Config The bootstrap scripts and related configuration TBD Basebox \u578b\u865f Codename Software GPIO External Circuit Targeted Machines BB-03-24NPN BASE03F3 5 OC/24V/3V3/NPN \u6ce8\u5851\u6a5f \u5927\u90e8\u4efd\u81ea\u52d5\u5674\u6cb9\u6a5f \u5439\u5851\u6a5f BB-03-24PNP BASE03F3 5 OC/24V/3V3/PNP \u6ce8\u5851\u6a5f\u6a5f\u68b0\u81c2 \u500b\u5225\u81ea\u52d5\u5674\u6cb9\u6a5f BB-03-12NPN BASE03F3 5 OC/12V/3V3/NPN \u79fb\u5370\u6a5f BB-04-24PNP BASE04 beta 5, 6, 7 OC/24V/3V3/PNP \u81ea\u52d5\u5674\u6cb9\u6a5f\u5674\u5480 (\u6536\u96c6\u9ad8\u983b\u8a0a\u865f) \u95dc\u65bc OC \u9078\u578b \u5149\u8026\u9694\u79bb\u6a21\u5757 (OC) \u53ef\u4ee5\u6309\u8f38\u5165\u96fb\u58d3(V)\u53ca\u6a5f\u5668\u8a0a\u865f\u6e90\u7684 PNP/NPN \u5c6c\u6027\u3002 PNP: H (\u9ad8) \u505c, L (\u5e95) \u958b NPN: L (\u5e95) \u505c, H (\u9ad8) \u958b","title":"What is Basebox"},{"location":"basebox/#basebox","text":"2019-11-19 Basebox, aka WiFi \u677f or IoT Device, is a physical device attached to a machine to receive the desired signal(s) from the machine. Basebox \u53ef\u5206\u70ba\u786c\u4ef6\u90e8\u4efd\u53ca\u8edf\u4ef6\u90e8\u4efd","title":"Basebox"},{"location":"basebox/#_1","text":"\u786c\u4ef6\u90e8\u4efd\u5148\u4ee5 \u90e8\u4ef6\u4ee3\u865f \u4f86\u8868\u793a\u53ef\u7528\u7684\u7d44\u4ef6\uff0c\u4ee5\u4fbf\u4ee5\u5f8c\u4f7f\u7528\u3002 \u90e8\u4ef6\u4ee3\u865f \u9ede\u64ca\u4e0b\u8868\u7684 \u90e8\u4ef6\u4ee3\u865f \u53ef\u4ee5\u6aa2\u8996\u6709\u95dc\u90e8\u4ef6\u53c3\u8003\u5167\u5bb9\u3002 \u90e8\u4ef6\u4ee3\u865f \u4e2d\u6587\u540d English Spec CAB 3\u82af\u5c4f\u853d\u4fe1\u53f7\u7ebf 3*0.2\u5e73\u65b9 CAS \u4eea\u8868\u76d2 \uff08\u900f\u660e\u76d6\uff09 Case \u5c3a\u5bf8\uff1a85x58x33 CN \u63a5\u7ebf\u7aef\u5b50 Connector CN/F \u7247\u5f62\u63a5\u7ebf\u7aef\u5b50 1.25-10MM CN/U U\u578b\u63a5\u7ebf\u7aef\u5b50 3.2mm FHR \u55ae\u6392\u6392\u91dd\u6bcd\u5ea7(\u76f4\u91dd) Female Header Receptacles - Single Row \u84dd\u8272 \u9488\u95f4\u8ddd\uff1a2.54MM 1x40P HST \u70ed\u7f29\u7ba1 Heat-shrink tubing \u76f4\u5f842.5MM HST/R \u7ea2\u8272\u70ed\u7f29\u7ba1 \u76f4\u5f84 5MM HST/B \u9ed1\u8272\u70ed\u7f29\u7ba1 \u76f4\u5f84 5MM HST/T \u900f\u660e\u70ed\u7f29\u7ba1 \u76f4\u5f84 15.4MM MCU NodeMCU \u5f00\u53d1\u677f (ESP8266m \u5e26CH340\u6a21\u5757\uff09 NodeMCU DevKit (ESP8266) ESP8266, CH340 OC \u5149\u8026\u9694\u79bb\u6a21\u5757 Optical Coupler Module OC/12V/3V3/NPN \u5149\u8026\u9694\u79bb\u6a21\u5757 Optical Coupler Module 12Vin, 3V3out, NPN OC/24V/3V3/PNP \u5149\u8026\u9694\u79bb\u6a21\u5757 Optical Coupler Module 24Vin, 3V3out, PNP PCB \u53cc\u9762\u73bb\u7ea4\u4e07\u80fd\u677f \u5c3a\u5bf8\uff1a4x6MM UPS Micro USB \u706b\u725b+\u5e26\u5f00\u5173\u6570\u636e\u7ebf Micro USB power supply \u8f93\u51fa\u7535\u538b5V \u8f93\u51fa\u7535\u6d413A + \u5e26\u5f00\u5173\u6570\u636e\u7ebf UXL USB \u5ef6\u957f\u7ebf\u516c\u5bf9\u6bcd \u9ed1\u8272 \u5706\u7ebf \u957f\u5ea63M \u7d44\u4ef6\u5927\u81f4\u4e0a\u53ef\u5206\u70ba\u4ee5\u4e0b\u5206\u7d44: \u5206\u7d44\u540d\u7a31 \u90e8\u4ef6\u4ee3\u865f \u5099\u8a3b \u4f9b\u96fb Power Supply UPS , UXL \u8996\u4e4e\u96fb\u6e90\u4f4d\u7f6e\u8207\u8ddd\u96e2 , \u57fa\u672c\u4e0a\u4e00\u81f4 \u8655\u7406\u5668 Process Unit MCU \u57fa\u672c\u4e0a\u4e00\u81f4 \u5916\u63a5\u96fb\u8def External Circuit CAB, CN, FHR, PCB, HST, OC \u8996\u4e4e MCU \u7684\u8edf\u4ef6\u53ca\u6a5f\u5668\u8a0a\u865f\u6e90\u800c\u90e8\u4ef6\u53ef\u80fd\u6709\u5225 \u5916\u6bbc Case CAS \u57fa\u672c\u4e0a\u4e00\u81f4","title":"\u786c\u4ef6\u90e8\u4efd"},{"location":"basebox/#_2","text":"\u8edf\u4ef6\u90e8\u4efd\u662f\u6307\u5b89\u88dd\u5728 MCU \u4e0a\u7684\u4e00\u7d44\u7a0b\u5f0f\u3002 \u8edf\u4ef6\u540d\u7a31 \u5099\u8a3b MOS The core firmware burnt in the MCU Base Library The library contains the common functions Scripts and Config The bootstrap scripts and related configuration TBD","title":"\u8edf\u4ef6\u90e8\u4efd"},{"location":"basebox/#basebox_1","text":"Codename Software GPIO External Circuit Targeted Machines BB-03-24NPN BASE03F3 5 OC/24V/3V3/NPN \u6ce8\u5851\u6a5f \u5927\u90e8\u4efd\u81ea\u52d5\u5674\u6cb9\u6a5f \u5439\u5851\u6a5f BB-03-24PNP BASE03F3 5 OC/24V/3V3/PNP \u6ce8\u5851\u6a5f\u6a5f\u68b0\u81c2 \u500b\u5225\u81ea\u52d5\u5674\u6cb9\u6a5f BB-03-12NPN BASE03F3 5 OC/12V/3V3/NPN \u79fb\u5370\u6a5f BB-04-24PNP BASE04 beta 5, 6, 7 OC/24V/3V3/PNP \u81ea\u52d5\u5674\u6cb9\u6a5f\u5674\u5480 (\u6536\u96c6\u9ad8\u983b\u8a0a\u865f)","title":"Basebox \u578b\u865f"},{"location":"basebox/#oc","text":"\u5149\u8026\u9694\u79bb\u6a21\u5757 (OC) \u53ef\u4ee5\u6309\u8f38\u5165\u96fb\u58d3(V)\u53ca\u6a5f\u5668\u8a0a\u865f\u6e90\u7684 PNP/NPN \u5c6c\u6027\u3002 PNP: H (\u9ad8) \u505c, L (\u5e95) \u958b NPN: L (\u5e95) \u505c, H (\u9ad8) \u958b","title":"\u95dc\u65bc OC \u9078\u578b"},{"location":"bb-cab/","text":"CAB 3\u82af\u5c4f\u853d\u4fe1\u53f7\u7ebf 2019-11-19 \u4f5c\u7528 \u4f9b\u61c9\u5546 https://item.taobao.com/item.htm?spm=a230r.1.14.82.356c7f21Hx9d0B&id=566542733443&ns=1&abbucket=9#detail \u53c3\u8003\u5716\u7247","title":"CAB 3\u82af\u5c4f\u853d\u4fe1\u53f7\u7ebf"},{"location":"bb-cab/#cab-3","text":"2019-11-19","title":"CAB 3\u82af\u5c4f\u853d\u4fe1\u53f7\u7ebf"},{"location":"bb-cab/#_1","text":"","title":"\u4f5c\u7528"},{"location":"bb-cab/#_2","text":"https://item.taobao.com/item.htm?spm=a230r.1.14.82.356c7f21Hx9d0B&id=566542733443&ns=1&abbucket=9#detail","title":"\u4f9b\u61c9\u5546"},{"location":"bb-cab/#_3","text":"","title":"\u53c3\u8003\u5716\u7247"},{"location":"bb-cas/","text":"CAS \u4eea\u8868\u76d2 \uff08\u900f\u660e\u76d6\uff09 2019-11-19 \u4f5c\u7528 \u4f9b\u61c9\u5546 https://item.taobao.com/item.htm?spm=a1z0d.6639537.1997196601.95.4c9b7484ytl2V1&id=535024240227 \u53c3\u8003\u5716\u7247","title":"CAS \u4eea\u8868\u76d2 \uff08\u900f\u660e\u76d6\uff09"},{"location":"bb-cas/#cas","text":"2019-11-19","title":"CAS \u4eea\u8868\u76d2 \uff08\u900f\u660e\u76d6\uff09"},{"location":"bb-cas/#_1","text":"","title":"\u4f5c\u7528"},{"location":"bb-cas/#_2","text":"https://item.taobao.com/item.htm?spm=a1z0d.6639537.1997196601.95.4c9b7484ytl2V1&id=535024240227","title":"\u4f9b\u61c9\u5546"},{"location":"bb-cas/#_3","text":"","title":"\u53c3\u8003\u5716\u7247"},{"location":"bb-machines-supported/","text":"Machines Supported 2019-11-20 At the time of writing, we have plan to support at least one model of the following types of machines with the Basebox. Plan Class \u6a5f\u985e \u8a0a\u865f\u4e8b\u4ef6 \u5be6\u73fe\u60c5\u6cc1 \u5099\u8a3b Injection Molding \u6ce8\u5851\u6a5f \u58d3\u7149\u6a5f\u7684\u96fb\u52d5\u958b\u6a21\u4e8b\u4ef6 \u2714 Injection Machine Robot Arm \u6a5f\u68b0\u81c2 \u58d3\u7149\u6a5f\u901a\u77e5\u800c\u958b\u59cb\u555f\u52d5\u7684\u4e8b\u4ef6 \u2714 Automatic Spray Machines \u81ea\u52d5\u5674\u6cb9\u6a5f \u5674\u6cb9\u6a5f\u7684\u96fb\u52d5\u95dc\u9580\u4e8b\u4ef6 \u2714 Automatic Spray Machines \u81ea\u52d5\u5674\u6cb9\u6a5f \u5674\u6cb9\u6a5f\u7684\u5674\u5480\u958b\u95dc\u4e8b\u4ef6 \u2714 Blow Molding \u5439\u5851\u6a5f \u5439\u5851\u6a5f\u7684\u96fb\u52d5\u555f\u52d5\u5207\u5200\u4e8b\u4ef6 \u2714 Pad Printer \u79fb\u5370\u6a5f \u79fb\u5370\u6a5f\u6c23\u7f38\u555f\u52d5\u4e2d\u8ef8\u63a8\u51fa\u4e8b\u4ef6 \u2714 Doll Hair Rooting Machine \u8eca\u9aee\u6a5f Vacuum Forming Machine \u771f\u7a7a\u6210\u578b\u5438\u7d22\u6a5f, \u5438\u7d22\u6a5f \u5438\u7d22\u6a5f\u7684\u96fb\u52d5\u555f\u52d5\u5207\u5200\u4e8b\u4ef6 Sewing Machine \u96fb\u52d5\u8863\u8eca Injection Molding \u6ce8\u5851\u6a5f Brand Model Manufacturer Product Reference Install? \u4f73\u660e PD268-KX \u5e7f\u4e1c\u4f73\u660e\u673a\u5668\u6709\u9650\u516c\u53f8 http://www.gdjmjq.com http://www.gdjmjq.com/products_show.asp?id=961 10 , 11 , 12 \u529b\u52c1 PT130 \u529b\u52c1\u79d1\u6280\u96c6\u5718\u6709\u9650\u516c\u53f8 https://www.lk.world/en/ \uff08\u6e2f\u4ea4\u6240 : 0558\uff09 13 , 15 \u529b\u52c1 PT160 \u529b\u52c1\u79d1\u6280\u96c6\u5718\u6709\u9650\u516c\u53f8 https://www.lk.world/en/ \uff08\u6e2f\u4ea4\u6240 : 0558\uff09 16 , 17 \u529b\u52c1 PT80 \u529b\u52c1\u79d1\u6280\u96c6\u5718\u6709\u9650\u516c\u53f8 https://www.lk.world/en/ \uff08\u6e2f\u4ea4\u6240 : 0558\uff09 35 \u529b\u52c1 Potenza-II PT160 \u529b\u52c1\u79d1\u6280\u96c6\u5718\u6709\u9650\u516c\u53f8 https://www.lk.world/en/ \uff08\u6e2f\u4ea4\u6240 : 0558\uff09 36 , 37 , 38 \u9707\u96c4 JM128-C/ES \u9707\u96c4\u96c6\u5718 https://chenhsong.com/zh-hans/ \uff08\u6e2f\u4ea4\u6240\uff1a0057\uff09 \u9707\u96c4 JM128 \u9707\u96c4\u96c6\u5718 https://chenhsong.com/zh-hans/ \uff08\u6e2f\u4ea4\u6240\uff1a0057\uff09 23 Injection Machine Robot Arm \u6a5f\u68b0\u81c2 Brand Model Manufacturer Product Reference Install? Keyshow \u5e7f\u4e1c\u5feb\u624b\u673a\u5668\u4eba\u79d1\u6280\u6709\u9650\u516c\u53f8 http://www.china-quickrobot.com/ http://www.china-quickrobot.com/show_168.htm 16 , 17 , 18 Automatic Spray Machines \u81ea\u52d5\u5674\u6cb9\u6a5f Brand Model Manufacturer Product Reference Install? \u91d1\u8fbe JD-P1 \u4e1c\u839e\u5e02\u8d3e\u6c0f\u673a\u68b0\u5236\u9020\u6709\u9650\u516c\u53f8 http://www.gdjiashi.cn http://www.gdjiashi.cn/mobile/e/action/ShowInfo.php?classid=2&id=69 3 , 4 , 5 \u91d1\u8fbe JD-J4 \u4e1c\u839e\u5e02\u8d3e\u6c0f\u673a\u68b0\u5236\u9020\u6709\u9650\u516c\u53f8 http://www.gdjiashi.cn 2 \u91d1\u8fbe JD-J8-A \u4e1c\u839e\u5e02\u8d3e\u6c0f\u673a\u68b0\u5236\u9020\u6709\u9650\u516c\u53f8 http://www.gdjiashi.cn http://www.gdjiashi.cn/mobile/e/action/ShowInfo.php?classid=2&id=63 9 , 10 \u91d1\u8fbe JD-J8-B \u4e1c\u839e\u5e02\u8d3e\u6c0f\u673a\u68b0\u5236\u9020\u6709\u9650\u516c\u53f8 http://www.gdjiashi.cn http://www.gdjiashi.cn/jbpyj/64.html 11 , 12 \u4e1c\u839e\u5e02\u6d69\u5927\u81ea\u52a8\u5316\u8bbe\u5907\u6709\u9650\u516c\u53f8 http://dghaoda.cn/ http://dghaoda.cn/pd.jsp?id=6#_pp=2_333 Blow Molding \u5439\u5851\u6a5f Brand Model Manufacturer Product Reference Install? \u6a02\u5584 SCJ-45Y2x1.05D \u5e7f\u4e1c\u4e50\u5584\u667a\u80fd\u88c5\u5907\u80a1\u4efd\u6709\u9650\u516c\u53f8 http://www.china-leshan.com/ http://www.china-leshan.com/index.php?m=content&c=index&a=show&catid=61&id=1305 \u987a\u5929\u7965 STXJC-U STXJC-70-40-25U2X1.4A \u4e2d\u5c71\u5e02\u987a\u5929\u7965\u5b9e\u4e1a\u6709\u9650\u516c\u53f8 http://www.zsstx.com/ \u4e92\u52a8\u767e \u79d1 http://www.china-leshan.com/index.php?m=content&c=index&a=show&catid=61&id=1305 Pad Printer \u79fb\u5370\u6a5f Brand Model Manufacturer Product Reference Install? \u5fe0\u79d1 \u4e1c\u839e\u5e02\u5fe0\u79d1\u673a\u68b0\u6709\u9650\u516c\u53f8 http://www.chungfou.com.cn/ Doll Hair Rooting Machine \u8eca\u9aee\u6a5f Brand Model Manufacturer Product Reference Install? \u91d1\u8b7d\u6a5f\u68b0\u81ea\u52d5\u8eca\u9aee\u6a5f http://www.google.com/ Information Insufficient Vacuum Forming Machine \u771f\u7a7a\u6210\u578b\u5438\u7d22\u6a5f, \u5438\u7d22\u6a5f Brand Model Manufacturer Product Reference Install? \u5357\u65b9\u96fb\u696d\u5438\u5851\u6a5f http://www.nf96.com/ Reference https://chenhsong.github.io/iChen/","title":"Machines Supported"},{"location":"bb-machines-supported/#machines-supported","text":"2019-11-20 At the time of writing, we have plan to support at least one model of the following types of machines with the Basebox.","title":"Machines Supported"},{"location":"bb-machines-supported/#plan","text":"Class \u6a5f\u985e \u8a0a\u865f\u4e8b\u4ef6 \u5be6\u73fe\u60c5\u6cc1 \u5099\u8a3b Injection Molding \u6ce8\u5851\u6a5f \u58d3\u7149\u6a5f\u7684\u96fb\u52d5\u958b\u6a21\u4e8b\u4ef6 \u2714 Injection Machine Robot Arm \u6a5f\u68b0\u81c2 \u58d3\u7149\u6a5f\u901a\u77e5\u800c\u958b\u59cb\u555f\u52d5\u7684\u4e8b\u4ef6 \u2714 Automatic Spray Machines \u81ea\u52d5\u5674\u6cb9\u6a5f \u5674\u6cb9\u6a5f\u7684\u96fb\u52d5\u95dc\u9580\u4e8b\u4ef6 \u2714 Automatic Spray Machines \u81ea\u52d5\u5674\u6cb9\u6a5f \u5674\u6cb9\u6a5f\u7684\u5674\u5480\u958b\u95dc\u4e8b\u4ef6 \u2714 Blow Molding \u5439\u5851\u6a5f \u5439\u5851\u6a5f\u7684\u96fb\u52d5\u555f\u52d5\u5207\u5200\u4e8b\u4ef6 \u2714 Pad Printer \u79fb\u5370\u6a5f \u79fb\u5370\u6a5f\u6c23\u7f38\u555f\u52d5\u4e2d\u8ef8\u63a8\u51fa\u4e8b\u4ef6 \u2714 Doll Hair Rooting Machine \u8eca\u9aee\u6a5f Vacuum Forming Machine \u771f\u7a7a\u6210\u578b\u5438\u7d22\u6a5f, \u5438\u7d22\u6a5f \u5438\u7d22\u6a5f\u7684\u96fb\u52d5\u555f\u52d5\u5207\u5200\u4e8b\u4ef6 Sewing Machine \u96fb\u52d5\u8863\u8eca","title":"Plan"},{"location":"bb-machines-supported/#injection-molding","text":"Brand Model Manufacturer Product Reference Install? \u4f73\u660e PD268-KX \u5e7f\u4e1c\u4f73\u660e\u673a\u5668\u6709\u9650\u516c\u53f8 http://www.gdjmjq.com http://www.gdjmjq.com/products_show.asp?id=961 10 , 11 , 12 \u529b\u52c1 PT130 \u529b\u52c1\u79d1\u6280\u96c6\u5718\u6709\u9650\u516c\u53f8 https://www.lk.world/en/ \uff08\u6e2f\u4ea4\u6240 : 0558\uff09 13 , 15 \u529b\u52c1 PT160 \u529b\u52c1\u79d1\u6280\u96c6\u5718\u6709\u9650\u516c\u53f8 https://www.lk.world/en/ \uff08\u6e2f\u4ea4\u6240 : 0558\uff09 16 , 17 \u529b\u52c1 PT80 \u529b\u52c1\u79d1\u6280\u96c6\u5718\u6709\u9650\u516c\u53f8 https://www.lk.world/en/ \uff08\u6e2f\u4ea4\u6240 : 0558\uff09 35 \u529b\u52c1 Potenza-II PT160 \u529b\u52c1\u79d1\u6280\u96c6\u5718\u6709\u9650\u516c\u53f8 https://www.lk.world/en/ \uff08\u6e2f\u4ea4\u6240 : 0558\uff09 36 , 37 , 38 \u9707\u96c4 JM128-C/ES \u9707\u96c4\u96c6\u5718 https://chenhsong.com/zh-hans/ \uff08\u6e2f\u4ea4\u6240\uff1a0057\uff09 \u9707\u96c4 JM128 \u9707\u96c4\u96c6\u5718 https://chenhsong.com/zh-hans/ \uff08\u6e2f\u4ea4\u6240\uff1a0057\uff09 23","title":"Injection Molding \u6ce8\u5851\u6a5f"},{"location":"bb-machines-supported/#injection-machine-robot-arm","text":"Brand Model Manufacturer Product Reference Install? Keyshow \u5e7f\u4e1c\u5feb\u624b\u673a\u5668\u4eba\u79d1\u6280\u6709\u9650\u516c\u53f8 http://www.china-quickrobot.com/ http://www.china-quickrobot.com/show_168.htm 16 , 17 , 18","title":"Injection Machine Robot Arm \u6a5f\u68b0\u81c2"},{"location":"bb-machines-supported/#automatic-spray-machines","text":"Brand Model Manufacturer Product Reference Install? \u91d1\u8fbe JD-P1 \u4e1c\u839e\u5e02\u8d3e\u6c0f\u673a\u68b0\u5236\u9020\u6709\u9650\u516c\u53f8 http://www.gdjiashi.cn http://www.gdjiashi.cn/mobile/e/action/ShowInfo.php?classid=2&id=69 3 , 4 , 5 \u91d1\u8fbe JD-J4 \u4e1c\u839e\u5e02\u8d3e\u6c0f\u673a\u68b0\u5236\u9020\u6709\u9650\u516c\u53f8 http://www.gdjiashi.cn 2 \u91d1\u8fbe JD-J8-A \u4e1c\u839e\u5e02\u8d3e\u6c0f\u673a\u68b0\u5236\u9020\u6709\u9650\u516c\u53f8 http://www.gdjiashi.cn http://www.gdjiashi.cn/mobile/e/action/ShowInfo.php?classid=2&id=63 9 , 10 \u91d1\u8fbe JD-J8-B \u4e1c\u839e\u5e02\u8d3e\u6c0f\u673a\u68b0\u5236\u9020\u6709\u9650\u516c\u53f8 http://www.gdjiashi.cn http://www.gdjiashi.cn/jbpyj/64.html 11 , 12 \u4e1c\u839e\u5e02\u6d69\u5927\u81ea\u52a8\u5316\u8bbe\u5907\u6709\u9650\u516c\u53f8 http://dghaoda.cn/ http://dghaoda.cn/pd.jsp?id=6#_pp=2_333","title":"Automatic Spray Machines \u81ea\u52d5\u5674\u6cb9\u6a5f"},{"location":"bb-machines-supported/#blow-molding","text":"Brand Model Manufacturer Product Reference Install? \u6a02\u5584 SCJ-45Y2x1.05D \u5e7f\u4e1c\u4e50\u5584\u667a\u80fd\u88c5\u5907\u80a1\u4efd\u6709\u9650\u516c\u53f8 http://www.china-leshan.com/ http://www.china-leshan.com/index.php?m=content&c=index&a=show&catid=61&id=1305 \u987a\u5929\u7965 STXJC-U STXJC-70-40-25U2X1.4A \u4e2d\u5c71\u5e02\u987a\u5929\u7965\u5b9e\u4e1a\u6709\u9650\u516c\u53f8 http://www.zsstx.com/ \u4e92\u52a8\u767e \u79d1 http://www.china-leshan.com/index.php?m=content&c=index&a=show&catid=61&id=1305","title":"Blow Molding \u5439\u5851\u6a5f"},{"location":"bb-machines-supported/#pad-printer","text":"Brand Model Manufacturer Product Reference Install? \u5fe0\u79d1 \u4e1c\u839e\u5e02\u5fe0\u79d1\u673a\u68b0\u6709\u9650\u516c\u53f8 http://www.chungfou.com.cn/","title":"Pad Printer \u79fb\u5370\u6a5f"},{"location":"bb-machines-supported/#doll-hair-rooting-machine","text":"Brand Model Manufacturer Product Reference Install? \u91d1\u8b7d\u6a5f\u68b0\u81ea\u52d5\u8eca\u9aee\u6a5f http://www.google.com/ Information Insufficient","title":"Doll Hair Rooting Machine \u8eca\u9aee\u6a5f"},{"location":"bb-machines-supported/#vacuum-forming-machine","text":"Brand Model Manufacturer Product Reference Install? \u5357\u65b9\u96fb\u696d\u5438\u5851\u6a5f http://www.nf96.com/","title":"Vacuum Forming Machine \u771f\u7a7a\u6210\u578b\u5438\u7d22\u6a5f, \u5438\u7d22\u6a5f"},{"location":"bb-machines-supported/#reference","text":"https://chenhsong.github.io/iChen/","title":"Reference"},{"location":"documentation/","text":"Documentation 2019-11-19 This article is for document developer. This page describes the documentation process and the style of this project. Document Generator We are migrating our tools for documentation to MkDocs + Material. For reference please visit the following links: MkDocs Official Website MkDocs-Material Website We are working documentation on Windows 10. Therefore the following code snippet are based on Windows platform. Also we have both Python 2.7 and 3.5 side by side, our pip commands will have the python3 keyword as well. Setup of Documentation Environment Install python3 and pip . Just go to the official website to download the installer. Install mkdocs package. Run python -m pip install mkdocs Install mkdocs-material theme. Run python -m pip install mkdocs-material Install pymdown-extensions extension. Run python3 -m pip install pymdown-extensions Install git-revision-date plugin. Run python3 -m pip install mkdocs-git-revision-date-plugin Enable git to manage the revision of the documentation folder. Document Project Folder Documentation is also a project. Documentation Folder in other words is also the project folder for documentation. The project folder name is iot-design , and its layout is: iot-design\\ \u251c mkdocs.yml \u251c docs\\ \u251c img\\ \u251c index.md \u251c ... \u251c site\\ \u251c .git\\ Document Development MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: ..iot-design> python3 -m mkdocs serve Document Site Build Build the documentation site with mkdocs build. This will create a new directory, named site. ..iot-design> python3 -m mkdocs build Documentation Deployment TBD Style The following is a set of rules for the writing markdown of this documentation. Revision Date All production-ready document page must contain the revision date of the page. It must be at the next line of the page title. Using the following code to print the revision date in your markdown file. `{{ git_revision_date }}` Litemotion Logo When displaying Litemotion logo in the page, please using the 150x50 version with the following: ![](./img/litemotion-logo-150x50.png) Show Result Image All image materials are stored in docs/img folder. Note The image path reference is a bit different from markdown and HTML. HTML syntax provides more control of the layout and style of the image (e.g. width or height). Markdown syntax ![](./img/your-image-file) HTML syntax < img src = \"../img/your-image-file\" alt = \"image alt text\" /> To-Be-Done For denoting some parts of the document which are still not complete. We use TBD label. !!! failure \"TBD\" Show Result TBD","title":"Documentation"},{"location":"documentation/#documentation","text":"2019-11-19 This article is for document developer. This page describes the documentation process and the style of this project.","title":"Documentation"},{"location":"documentation/#document-generator","text":"We are migrating our tools for documentation to MkDocs + Material. For reference please visit the following links: MkDocs Official Website MkDocs-Material Website We are working documentation on Windows 10. Therefore the following code snippet are based on Windows platform. Also we have both Python 2.7 and 3.5 side by side, our pip commands will have the python3 keyword as well. Setup of Documentation Environment Install python3 and pip . Just go to the official website to download the installer. Install mkdocs package. Run python -m pip install mkdocs Install mkdocs-material theme. Run python -m pip install mkdocs-material Install pymdown-extensions extension. Run python3 -m pip install pymdown-extensions Install git-revision-date plugin. Run python3 -m pip install mkdocs-git-revision-date-plugin Enable git to manage the revision of the documentation folder.","title":"Document Generator"},{"location":"documentation/#document-project-folder","text":"Documentation is also a project. Documentation Folder in other words is also the project folder for documentation. The project folder name is iot-design , and its layout is: iot-design\\ \u251c mkdocs.yml \u251c docs\\ \u251c img\\ \u251c index.md \u251c ... \u251c site\\ \u251c .git\\","title":"Document Project Folder"},{"location":"documentation/#document-development","text":"MkDocs comes with a built-in dev-server that lets you preview your documentation as you work on it. Make sure you're in the same directory as the mkdocs.yml configuration file, and then start the server by running the mkdocs serve command: ..iot-design> python3 -m mkdocs serve","title":"Document Development"},{"location":"documentation/#document-site-build","text":"Build the documentation site with mkdocs build. This will create a new directory, named site. ..iot-design> python3 -m mkdocs build","title":"Document Site Build"},{"location":"documentation/#documentation-deployment","text":"TBD","title":"Documentation Deployment"},{"location":"documentation/#style","text":"The following is a set of rules for the writing markdown of this documentation.","title":"Style"},{"location":"documentation/#revision-date","text":"All production-ready document page must contain the revision date of the page. It must be at the next line of the page title. Using the following code to print the revision date in your markdown file. `{{ git_revision_date }}`","title":"Revision Date"},{"location":"documentation/#litemotion-logo","text":"When displaying Litemotion logo in the page, please using the 150x50 version with the following: ![](./img/litemotion-logo-150x50.png) Show Result","title":"Litemotion Logo"},{"location":"documentation/#image","text":"All image materials are stored in docs/img folder. Note The image path reference is a bit different from markdown and HTML. HTML syntax provides more control of the layout and style of the image (e.g. width or height). Markdown syntax ![](./img/your-image-file) HTML syntax < img src = \"../img/your-image-file\" alt = \"image alt text\" />","title":"Image"},{"location":"documentation/#to-be-done","text":"For denoting some parts of the document which are still not complete. We use TBD label. !!! failure \"TBD\" Show Result TBD","title":"To-Be-Done"},{"location":"guide/","text":"Design Guide 2019-11-20 This article is for technical audience. Design Guide provides us some general principles that are applied in various sub projects of ZIOT. HTTP Verbs We apply the follow rules for our REST APIs. PUT - It is used to create a new record. GET - It is used to retrieve a set or records. POST - It is used to change records or perform actions. DELETE - It is used to remove a record. Language Code We apply the language code defined in IANA Langauge Subtag Registry . Basically, a language code is of the form of langtag [- subtag ]. Example of Language Codes Code Description en English zh-CN Chinese of Region China zh-TW Chinese of Region Taiwan Multi-Lang (i18n) Static Site When there is a multiple language version of a static website (e.g. documentation sites), we apply the following pattern for URL: prot : domain / project /: lang / other - query - parts where :lang is the language Code. PowerShell Program Using different PowerShell Module Manifest files ( .psd1 ) to store translations of strings. SPA We cannot using the approach of Static Site for SPA. Time window Time window is an interval covering the period of time. In general, a time window is the half-closed interval [start,end) .","title":"Guide"},{"location":"guide/#design-guide","text":"2019-11-20 This article is for technical audience. Design Guide provides us some general principles that are applied in various sub projects of ZIOT.","title":"Design Guide"},{"location":"guide/#http-verbs","text":"We apply the follow rules for our REST APIs. PUT - It is used to create a new record. GET - It is used to retrieve a set or records. POST - It is used to change records or perform actions. DELETE - It is used to remove a record.","title":"HTTP Verbs"},{"location":"guide/#language-code","text":"We apply the language code defined in IANA Langauge Subtag Registry . Basically, a language code is of the form of langtag [- subtag ]. Example of Language Codes Code Description en English zh-CN Chinese of Region China zh-TW Chinese of Region Taiwan","title":"Language Code"},{"location":"guide/#multi-lang-i18n","text":"","title":"Multi-Lang (i18n)"},{"location":"guide/#static-site","text":"When there is a multiple language version of a static website (e.g. documentation sites), we apply the following pattern for URL: prot : domain / project /: lang / other - query - parts where :lang is the language Code.","title":"Static Site"},{"location":"guide/#powershell-program","text":"Using different PowerShell Module Manifest files ( .psd1 ) to store translations of strings.","title":"PowerShell Program"},{"location":"guide/#spa","text":"We cannot using the approach of Static Site for SPA.","title":"SPA"},{"location":"guide/#time-window","text":"Time window is an interval covering the period of time. In general, a time window is the half-closed interval [start,end) .","title":"Time window"},{"location":"linux-tips/","text":"Linux Tips 2019-11-20 This article is for technical audience. Here we summarize some scripts, commands or useful references for operating Linux for reference. The results of the following commands are just examples and they may not be the same as the results on your system. Check Linux Version Method 1: lsb_release -a WSL (\u2714) simon@wsl:~$ lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 17 .10 Release: 17 .10 Codename: artful Azure Ubuntu (\u2714) simon@azure:~$ lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 17 .10 Release: 17 .10 Codename: artful Method 2: cat /etc/issue WSL (\u2714) simon@wsl:~$ cat /etc/issue Ubuntu 17 .10 \\n \\l Azure Ubuntu (\u2714) simon@azure:~$ cat /etc/issue Ubuntu 17 .10 \\n \\l Color meaning of ls Since the color meaning of ls in WSL is not the same as Ubuntn Linux, we summarize the colors meaning here and some are special for WSL. source Colors List Uncolored (white) : file or non-filename text (e.g. permissions in the output of ls -l) Bold blue : directory directory Bold cyan : link symbolic link Bold green : executable executable file Bold red : archive file Bold magenta : image file, video, graphic, etc. or door or socket Cyan : audio file Yellow with black background : pipe (AKA FIFO) Bold yellow with black background : block device or character device Bold red with black background : orphan symlink or missing file Uncolored with red background : set-user-ID file Black with yellow background : set-group-ID file Black with red background : file with capability White with blue background : sticky directory Blue with green background : ow directory other-writable directory Black with green background : sticky and other-writable directory Environment & Shell Variables The following two links are good explanation about environment and shell variables. https://www.cyberciti.biz/faq/linux-list-all-environment-variables-env-command/ https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps printenv and set are common commands for environment and shell variables. printenv WSL (\u2714) simon@wsl:~$ printenv ... too much ... printenv Azure Ubuntu (\u2714) simon@azure:~$ printenv ... too much ... set WSL (\u2714) simon@wsl:~$ set ... too much ... set Azure Ubuntu (\u2714) simon@azure:~$ set ... too much ... List hidden files or directory ls -a ls WSL (\u2714) simon@wsl:~$ ls dir-iot-server.sh ls -a WSL (\u2714) simon@wsl:~$ ls -a . .bash_history .bashrc .config .nano .node_repl_history .nvm .profile .rnd .viminfo .. .bash_logout .cache dir-iot-server.sh .node-gyp .npm .pm2 .python_history .sudo_as_admin_successful .wget-hsts ls Azure Ubuntu (\u2714) simon@azure:~$ ls iot-server iot-zmon nohup.out ls -a Azure Ubuntu (\u2714) simon@azure:~$ ls -a . .bash_history .bashrc .config .node_repl_history .pm2 .sqlite_history .sudo_as_admin_successful iot-server nohup.out .. .bash_logout .cache .nano .npm .profile .ssh .viminfo iot-zmon Locate a file Method 1: locate WSL (\u2714) simon@wsl:~$ locate mlocate.db /usr/share/man/man5/mlocate.db.5.gz /var/lib/mlocate/mlocate.db.Oe8s8w Azure Ubuntu (\u2714) simon@azure:~$ locate mlocate.db /usr/share/man/man5/mlocate.db.5.gz /var/lib/mlocate/mlocate.db /var/lib/mlocate/mlocate.db.mt4wif Note locate is faster because it reads the database ( mlocate.db ) but does not search the entire file system. Using command sudo updatedb to update the database. Note locate -r will search the name with regular expression . Common expression ^XX means beginning with and XX$ end with. Read this for more about Regex. Method 2: find WSL (\u2714) Azure Ubuntu (\u2714) WSL (\u2714) simon@wsl:~$ find ./.nvm -name node ./.nvm/versions/node ./.nvm/versions/node/v12.7.0/bin/node ./.nvm/versions/node/v12.7.0/include/node ./.nvm/versions/node/v12.7.0/share/doc/node Azure Ubuntu (\u2714) simon@azure:~/iot-server$ find ./lib -name dbs.js ./lib/dbs.js Note find [dir-path] -name [filename] is the general pattern of the command. Note find . -name \"*.txt\" is to search for a particular file type txt in the current directory. Note * here is a wildcard character. Read this for more about wildcard. Locate an executable file which WSL (\u2714) simon@wsl:~$ which npm /home/simon/.nvm/versions/node/v12.7.0/bin/npm Azure Ubuntu (\u2714) simon@azure:~$ which npm /usr/bin/npm which is used to locate an execute file associate with a given command by searching the path environment variable Permission of a file This is a good article about the file permission in linux. The Filesystem Hierarchy Standard FHS (https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard) defines the strucrture. (source: https://askubuntu.com/questions/138547/how-to-understand-the-ubuntu-file-system-layout)","title":"Linux Tips"},{"location":"linux-tips/#linux-tips","text":"2019-11-20 This article is for technical audience. Here we summarize some scripts, commands or useful references for operating Linux for reference. The results of the following commands are just examples and they may not be the same as the results on your system.","title":"Linux Tips"},{"location":"linux-tips/#check-linux-version","text":"Method 1: lsb_release -a WSL (\u2714) simon@wsl:~$ lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 17 .10 Release: 17 .10 Codename: artful Azure Ubuntu (\u2714) simon@azure:~$ lsb_release -a No LSB modules are available. Distributor ID: Ubuntu Description: Ubuntu 17 .10 Release: 17 .10 Codename: artful Method 2: cat /etc/issue WSL (\u2714) simon@wsl:~$ cat /etc/issue Ubuntu 17 .10 \\n \\l Azure Ubuntu (\u2714) simon@azure:~$ cat /etc/issue Ubuntu 17 .10 \\n \\l","title":"Check Linux Version"},{"location":"linux-tips/#color-meaning-of-ls","text":"Since the color meaning of ls in WSL is not the same as Ubuntn Linux, we summarize the colors meaning here and some are special for WSL. source Colors List Uncolored (white) : file or non-filename text (e.g. permissions in the output of ls -l) Bold blue : directory directory Bold cyan : link symbolic link Bold green : executable executable file Bold red : archive file Bold magenta : image file, video, graphic, etc. or door or socket Cyan : audio file Yellow with black background : pipe (AKA FIFO) Bold yellow with black background : block device or character device Bold red with black background : orphan symlink or missing file Uncolored with red background : set-user-ID file Black with yellow background : set-group-ID file Black with red background : file with capability White with blue background : sticky directory Blue with green background : ow directory other-writable directory Black with green background : sticky and other-writable directory","title":"Color meaning of ls"},{"location":"linux-tips/#environment-shell-variables","text":"The following two links are good explanation about environment and shell variables. https://www.cyberciti.biz/faq/linux-list-all-environment-variables-env-command/ https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps printenv and set are common commands for environment and shell variables. printenv WSL (\u2714) simon@wsl:~$ printenv ... too much ... printenv Azure Ubuntu (\u2714) simon@azure:~$ printenv ... too much ... set WSL (\u2714) simon@wsl:~$ set ... too much ... set Azure Ubuntu (\u2714) simon@azure:~$ set ... too much ...","title":"Environment &amp; Shell Variables"},{"location":"linux-tips/#list-hidden-files-or-directory","text":"ls -a ls WSL (\u2714) simon@wsl:~$ ls dir-iot-server.sh ls -a WSL (\u2714) simon@wsl:~$ ls -a . .bash_history .bashrc .config .nano .node_repl_history .nvm .profile .rnd .viminfo .. .bash_logout .cache dir-iot-server.sh .node-gyp .npm .pm2 .python_history .sudo_as_admin_successful .wget-hsts ls Azure Ubuntu (\u2714) simon@azure:~$ ls iot-server iot-zmon nohup.out ls -a Azure Ubuntu (\u2714) simon@azure:~$ ls -a . .bash_history .bashrc .config .node_repl_history .pm2 .sqlite_history .sudo_as_admin_successful iot-server nohup.out .. .bash_logout .cache .nano .npm .profile .ssh .viminfo iot-zmon","title":"List hidden files or directory"},{"location":"linux-tips/#locate-a-file","text":"Method 1: locate WSL (\u2714) simon@wsl:~$ locate mlocate.db /usr/share/man/man5/mlocate.db.5.gz /var/lib/mlocate/mlocate.db.Oe8s8w Azure Ubuntu (\u2714) simon@azure:~$ locate mlocate.db /usr/share/man/man5/mlocate.db.5.gz /var/lib/mlocate/mlocate.db /var/lib/mlocate/mlocate.db.mt4wif Note locate is faster because it reads the database ( mlocate.db ) but does not search the entire file system. Using command sudo updatedb to update the database. Note locate -r will search the name with regular expression . Common expression ^XX means beginning with and XX$ end with. Read this for more about Regex. Method 2: find WSL (\u2714) Azure Ubuntu (\u2714) WSL (\u2714) simon@wsl:~$ find ./.nvm -name node ./.nvm/versions/node ./.nvm/versions/node/v12.7.0/bin/node ./.nvm/versions/node/v12.7.0/include/node ./.nvm/versions/node/v12.7.0/share/doc/node Azure Ubuntu (\u2714) simon@azure:~/iot-server$ find ./lib -name dbs.js ./lib/dbs.js Note find [dir-path] -name [filename] is the general pattern of the command. Note find . -name \"*.txt\" is to search for a particular file type txt in the current directory. Note * here is a wildcard character. Read this for more about wildcard.","title":"Locate a file"},{"location":"linux-tips/#locate-an-executable-file","text":"which WSL (\u2714) simon@wsl:~$ which npm /home/simon/.nvm/versions/node/v12.7.0/bin/npm Azure Ubuntu (\u2714) simon@azure:~$ which npm /usr/bin/npm which is used to locate an execute file associate with a given command by searching the path environment variable","title":"Locate an executable file"},{"location":"linux-tips/#permission-of-a-file","text":"This is a good article about the file permission in linux.","title":"Permission of a file"},{"location":"linux-tips/#the-filesystem-hierarchy-standard","text":"FHS (https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard) defines the strucrture. (source: https://askubuntu.com/questions/138547/how-to-understand-the-ubuntu-file-system-layout)","title":"The Filesystem Hierarchy Standard"},{"location":"toolz-get-started/","text":"Get Started with Toolz 2019-11-20 Start tool.exe \u96d9\u64ca tool.exe \u3002\u6b63\u5e38\u7684\u60c5\u6cc1\u6703\u51fa\u73fe\u4ee5\u4e0b\u756b\u9762\uff1a Title Bar toolz \u7a0b\u5f0f\u7684\u7684\u300c\u6a19\u984c\u6b04\u300d (title bar) \u6703\u986f\u793a\u7576\u524d\u72c0\u614b\u8a0a\u606f\u3002\u72c0\u614b\u8a0a\u606f\u6703\u56e0\u8a2d\u5b9a\uff0c\u53ca\u7576\u524d\u5de5\u4f5c\u800c\u7570\u3002\u72c0\u614b\u8a0a\u606f\u5305\u62ec\u4e0b\u5217\u5167\u5bb9: \u8a0a\u606f\u6a19\u7c64 \u8a0a\u606f\u610f\u7fa9 \u8aaa\u660e [lang] \u53cd\u6620\u7576\u524d\u9078\u7528\u7684\u8a9e\u8a00\u3002 \u6a19\u7c64\u503c\u53c3\u8003 Guide \u76f8\u95dc\u5167\u90e8 \u3002\u7576\u958b\u555f toolz \u6642\u53d6 config.json \u4e2d\u7684 workspace.i18n.user \u7684\u503c\u3002 [profile] \u53cd\u6620\u7576\u524d\u9078\u7528\u7684 profile\u3002 \u4ee5\u4e0a\u4f8b\u5b50\u4e2d ziot-local \u8868\u793a\u76ee\u524d\u4f7f\u7528\u672c\u6a5f\u7684\u958b\u767c\u7248 IoT Server\u3002Profile \u4e3b\u8981\u662f\u7ba1\u7406\u4e0d\u540c IoT Server \u8a2d\u5b9a\u3002\u5982\u679c\u6709\u591a\u65bc\u4e00\u500b profiles \u6642\uff0c\u7576\u4e2d\u6703\u6709\u4e00\u500b\u662f\u9ed8\u8a8d\u9078\u7528\u7684\u3002\u5927\u591a\u6578\u7528\u6236\u53ea\u6709\u4e00\u500b Profile\u3002 [login] \u53cd\u6620\u7576\u524d\u767b\u5165 profile \u7684\u8eab\u4efd\u3002 \u4ee5\u4e0a\u4f8b\u5b50\u4e2d\u6c92\u6709 login \u7684\u503c\uff0c\u8868\u793a\u76ee\u524d\u4ecd\u672a\u767b\u5165\u3002 [org] \u53cd\u6620\u7576\u524d\u767b\u5165 profile \u4e2d\u7684\u90a3\u500b\u7d44\u7e54\u3002 \u4ee5\u4e0a\u4f8b\u5b50\u4e2d\u6c92\u6709 org \u7684\u503c\uff0c\u8868\u793a\u76ee\u524d\u4ecd\u672a\u767b\u5165\u3002 [usb] \u53cd\u6620\u7576\u524d\u9078\u7528\u7684 USB \u7aef\u53e3\u3002 \u4ee5\u4e0a\u4f8b\u5b50\u4e2d\u6c92\u6709 usb \u7684\u503c\uff0c\u8868\u793a\u76ee\u524d\u4ecd\u672a\u9078\u7528\u4efb\u4f55\u7aef\u53e3\u3002 \u5982\u679c\u51fa\u73fe\u554f\u984c\uff0c\u5f88\u5927\u60c5\u6cc1\u662f\u5b89\u88dd\u300c\u524d\u63d0\u300d\u6c92\u9810\u5099\u597d\uff0c\u6216\u662f config.json \u51fa\u73fe\u554f\u984c\u3002","title":"Get Started w Toolz"},{"location":"toolz-get-started/#get-started-with-toolz","text":"2019-11-20","title":"Get Started with Toolz"},{"location":"toolz-get-started/#start-toolexe","text":"\u96d9\u64ca tool.exe \u3002\u6b63\u5e38\u7684\u60c5\u6cc1\u6703\u51fa\u73fe\u4ee5\u4e0b\u756b\u9762\uff1a","title":"Start tool.exe"},{"location":"toolz-get-started/#title-bar","text":"toolz \u7a0b\u5f0f\u7684\u7684\u300c\u6a19\u984c\u6b04\u300d (title bar) \u6703\u986f\u793a\u7576\u524d\u72c0\u614b\u8a0a\u606f\u3002\u72c0\u614b\u8a0a\u606f\u6703\u56e0\u8a2d\u5b9a\uff0c\u53ca\u7576\u524d\u5de5\u4f5c\u800c\u7570\u3002\u72c0\u614b\u8a0a\u606f\u5305\u62ec\u4e0b\u5217\u5167\u5bb9: \u8a0a\u606f\u6a19\u7c64 \u8a0a\u606f\u610f\u7fa9 \u8aaa\u660e [lang] \u53cd\u6620\u7576\u524d\u9078\u7528\u7684\u8a9e\u8a00\u3002 \u6a19\u7c64\u503c\u53c3\u8003 Guide \u76f8\u95dc\u5167\u90e8 \u3002\u7576\u958b\u555f toolz \u6642\u53d6 config.json \u4e2d\u7684 workspace.i18n.user \u7684\u503c\u3002 [profile] \u53cd\u6620\u7576\u524d\u9078\u7528\u7684 profile\u3002 \u4ee5\u4e0a\u4f8b\u5b50\u4e2d ziot-local \u8868\u793a\u76ee\u524d\u4f7f\u7528\u672c\u6a5f\u7684\u958b\u767c\u7248 IoT Server\u3002Profile \u4e3b\u8981\u662f\u7ba1\u7406\u4e0d\u540c IoT Server \u8a2d\u5b9a\u3002\u5982\u679c\u6709\u591a\u65bc\u4e00\u500b profiles \u6642\uff0c\u7576\u4e2d\u6703\u6709\u4e00\u500b\u662f\u9ed8\u8a8d\u9078\u7528\u7684\u3002\u5927\u591a\u6578\u7528\u6236\u53ea\u6709\u4e00\u500b Profile\u3002 [login] \u53cd\u6620\u7576\u524d\u767b\u5165 profile \u7684\u8eab\u4efd\u3002 \u4ee5\u4e0a\u4f8b\u5b50\u4e2d\u6c92\u6709 login \u7684\u503c\uff0c\u8868\u793a\u76ee\u524d\u4ecd\u672a\u767b\u5165\u3002 [org] \u53cd\u6620\u7576\u524d\u767b\u5165 profile \u4e2d\u7684\u90a3\u500b\u7d44\u7e54\u3002 \u4ee5\u4e0a\u4f8b\u5b50\u4e2d\u6c92\u6709 org \u7684\u503c\uff0c\u8868\u793a\u76ee\u524d\u4ecd\u672a\u767b\u5165\u3002 [usb] \u53cd\u6620\u7576\u524d\u9078\u7528\u7684 USB \u7aef\u53e3\u3002 \u4ee5\u4e0a\u4f8b\u5b50\u4e2d\u6c92\u6709 usb \u7684\u503c\uff0c\u8868\u793a\u76ee\u524d\u4ecd\u672a\u9078\u7528\u4efb\u4f55\u7aef\u53e3\u3002 \u5982\u679c\u51fa\u73fe\u554f\u984c\uff0c\u5f88\u5927\u60c5\u6cc1\u662f\u5b89\u88dd\u300c\u524d\u63d0\u300d\u6c92\u9810\u5099\u597d\uff0c\u6216\u662f config.json \u51fa\u73fe\u554f\u984c\u3002","title":"Title Bar"},{"location":"toolz/","text":"Toolz 2019-11-19 toolz \u662f\u4e00\u500b\u652f\u63f4 ZIOT \u9805\u76ee\u7684\u5c0f\u5de5\u5177\u3002\u4f5c\u7528\u662f\u63d0\u4f9b\u4e00\u500b\u7d71\u4e00\u7684\u5de5\u5177\u4f86\u958b\u767c\uff0c\u6e2c\u8a66\uff0c\u5b89\u88dd\u53ca\u8a2d\u5b9a\u9805\u76ee\u4e2d\u4f7f\u7528\u7684 Basebox \u7a0b\u5f0f\u3002 toolz \u662f\u4e00\u500b\u4ea4\u4e92\u5f0f\u7684\u57f7\u884c\u74b0\u5883\uff0c\u985e\u4f3c\u65bc REPL (Read-Eval-Print Loop)\u3002 1 2 3 ________ _____ _____ ___ _______ /__ __// _ \\/ _ \\ / //___ / | | | | | || | | | / / / / | | | |_| || |_| | / /__ / /__ |__| \\_____/\\_____//_____/ /______/ Tool for ZIOT Features \u4ecb\u9762\u652f\u63f4\u591a\u8a9e\u8a00 \u652f\u63f4\u5728\u7dda\u6aa2\u67e5\u66f4\u65b0 toolz \u53ef\u4ee5\u5728\u7dda\u53bb\u6307\u5b9a\u7db2\u5eab\u5c0b\u627e\u6709\u6c92\u6709\u66f4\u65b0\u7684\u7248\u672c\u53ef\u4e0b\u8f09\u3002 \u652f\u63f4\u81ea\u5b9a\u7fa9\u9810\u8a2d\u6307\u4ee4 (Preset Command) \u9810\u8a2d\u6307\u4ee4 (Preset Command) \u8207 toolz \u7684 \u547d\u4ee4 \u662f\u4e0d\u540c\u7684\u6771\u897f\u3002 \u9810\u8a2d\u6307\u4ee4 \u7684\u57fa\u672c\u4f5c\u7528\u5c31\u662f\u7528\u7c21\u55ae\u540d\u7a31\u4f86\u5b9a\u7fa9\u4e00\u4e9b\u5728 Basebox \u4e0a\u57f7\u884c\u7684\u5c0f\u8173\u672c\u3002\u6240\u4ee5\u9810\u8a2d\u6307\u4ee4\u662f\u5728 usb \u6a21\u7d44\u4e0b\u904b\u4f5c\u3002 Installation \u5b89\u88dd\u524d\u63d0 - PowerShell PowerShell: toolz \u662f\u4ee5 PowerShell \u958b\u767c\u7684\u3002\u5c0d PowerShell \u7248\u672c\u8981\u6c42\u5728 5.1 \u6216\u4ee5\u4e0a\u3002 \u53ef\u4ee5\u57f7\u884c\u4ee3\u78bc powershell $PSVersionTable.PSVersion \u6aa2\u67e5 PowerShell \u7248\u672c\u3002 \u5b89\u88dd\u524d\u63d0 - USB Driver USB Driver: toolz \u8207 MCU \u7684\u901a\u8a0a\u5927\u90e8\u662f\u4ee5 USB \u9032\u884c\uff0c\u5728 Windows \u4e2d\u6211\u5011\u4f7f\u7528 CH340 Windows Driver (\u9a45\u52d5\u7a0b\u5f0f)\u3002Winchihead (WCH) \u6c5f\u82cf\u6c81\u6052\u80a1\u4efd\u6709\u9650\u516c\u53f8 \u8ca0\u8cac CH340 Driver \u7684\u7dad\u8b77\u3002 \u53c3\u8003\u6b64 WCH \u7ba1\u65b9\u7db2\u5740 \u4e86\u89e3\u5982\u4f55\u4e0b\u8f09\u5b89\u88dd\u3002 \u6216 \u53c3\u8003 Thingpluse \u7db2\u5740\u7684\u82f1\u6587 \u53c3\u8003\u6587\u4ef6 \u3002 \u6210\u529f\u5b89\u88dd\u5f8c\uff0c\u53ef\u628a Device \u63a5\u4e0a USB \u7aef\u53e3\uff0c\u518d\u958b\u555f Windows Device Manager \uff0c\u5728 Ports \u7bc0\u9ede\u4e2d\u6703\u770b\u5230\u985e\u4f3c\u7684\u5167\u5bb9\u3002 \u5b8c\u6210\u524d\u63d0\u7684\u6aa2\u67e5\u5f8c\uff0c\u5b89\u88dd toolz \u53ea\u8981\u628a TOOLZ.zip \u6a94\u89e3\u58d3 (unzip) \u5f8c\u5373\u5b8c\u6210\u3002 \u6253\u958b toolz \u7684\u76ee\u9304\uff0c\u6703\u770b\u5230\u4ee5\u4e0b\u7684\u76ee\u9304\u53ca\u6a94\u6848\u540d\u7a31\u3002 toolz\\ \u251c doc\\ \u251c locales\\ \u251c plugins\\ \u251c tool.exe \u251c config.json Wiki \u4e2d\u6587: \u8b80\u53d6\ufe63\u6c42\u503c\ufe63\u8f38\u51fa\u5faa\u74b0 \u21a9 Wiki \u82f1\u6587: Read\u2013Eval\u2013Print Loop \u21a9 \u7c21\u66f8\u6587\u7ae0: \u5e38\u89c1\u7f16\u7a0b\u8bed\u8a00\u5bf9REPL\u652f\u6301\u60c5\u51b5\u5c0f\u7ed3 \u21a9","title":"What is Toolz"},{"location":"toolz/#toolz","text":"2019-11-19 toolz \u662f\u4e00\u500b\u652f\u63f4 ZIOT \u9805\u76ee\u7684\u5c0f\u5de5\u5177\u3002\u4f5c\u7528\u662f\u63d0\u4f9b\u4e00\u500b\u7d71\u4e00\u7684\u5de5\u5177\u4f86\u958b\u767c\uff0c\u6e2c\u8a66\uff0c\u5b89\u88dd\u53ca\u8a2d\u5b9a\u9805\u76ee\u4e2d\u4f7f\u7528\u7684 Basebox \u7a0b\u5f0f\u3002 toolz \u662f\u4e00\u500b\u4ea4\u4e92\u5f0f\u7684\u57f7\u884c\u74b0\u5883\uff0c\u985e\u4f3c\u65bc REPL (Read-Eval-Print Loop)\u3002 1 2 3 ________ _____ _____ ___ _______ /__ __// _ \\/ _ \\ / //___ / | | | | | || | | | / / / / | | | |_| || |_| | / /__ / /__ |__| \\_____/\\_____//_____/ /______/ Tool for ZIOT","title":"Toolz"},{"location":"toolz/#features","text":"\u4ecb\u9762\u652f\u63f4\u591a\u8a9e\u8a00 \u652f\u63f4\u5728\u7dda\u6aa2\u67e5\u66f4\u65b0 toolz \u53ef\u4ee5\u5728\u7dda\u53bb\u6307\u5b9a\u7db2\u5eab\u5c0b\u627e\u6709\u6c92\u6709\u66f4\u65b0\u7684\u7248\u672c\u53ef\u4e0b\u8f09\u3002 \u652f\u63f4\u81ea\u5b9a\u7fa9\u9810\u8a2d\u6307\u4ee4 (Preset Command) \u9810\u8a2d\u6307\u4ee4 (Preset Command) \u8207 toolz \u7684 \u547d\u4ee4 \u662f\u4e0d\u540c\u7684\u6771\u897f\u3002 \u9810\u8a2d\u6307\u4ee4 \u7684\u57fa\u672c\u4f5c\u7528\u5c31\u662f\u7528\u7c21\u55ae\u540d\u7a31\u4f86\u5b9a\u7fa9\u4e00\u4e9b\u5728 Basebox \u4e0a\u57f7\u884c\u7684\u5c0f\u8173\u672c\u3002\u6240\u4ee5\u9810\u8a2d\u6307\u4ee4\u662f\u5728 usb \u6a21\u7d44\u4e0b\u904b\u4f5c\u3002","title":"Features"},{"location":"toolz/#installation","text":"\u5b89\u88dd\u524d\u63d0 - PowerShell PowerShell: toolz \u662f\u4ee5 PowerShell \u958b\u767c\u7684\u3002\u5c0d PowerShell \u7248\u672c\u8981\u6c42\u5728 5.1 \u6216\u4ee5\u4e0a\u3002 \u53ef\u4ee5\u57f7\u884c\u4ee3\u78bc powershell $PSVersionTable.PSVersion \u6aa2\u67e5 PowerShell \u7248\u672c\u3002 \u5b89\u88dd\u524d\u63d0 - USB Driver USB Driver: toolz \u8207 MCU \u7684\u901a\u8a0a\u5927\u90e8\u662f\u4ee5 USB \u9032\u884c\uff0c\u5728 Windows \u4e2d\u6211\u5011\u4f7f\u7528 CH340 Windows Driver (\u9a45\u52d5\u7a0b\u5f0f)\u3002Winchihead (WCH) \u6c5f\u82cf\u6c81\u6052\u80a1\u4efd\u6709\u9650\u516c\u53f8 \u8ca0\u8cac CH340 Driver \u7684\u7dad\u8b77\u3002 \u53c3\u8003\u6b64 WCH \u7ba1\u65b9\u7db2\u5740 \u4e86\u89e3\u5982\u4f55\u4e0b\u8f09\u5b89\u88dd\u3002 \u6216 \u53c3\u8003 Thingpluse \u7db2\u5740\u7684\u82f1\u6587 \u53c3\u8003\u6587\u4ef6 \u3002 \u6210\u529f\u5b89\u88dd\u5f8c\uff0c\u53ef\u628a Device \u63a5\u4e0a USB \u7aef\u53e3\uff0c\u518d\u958b\u555f Windows Device Manager \uff0c\u5728 Ports \u7bc0\u9ede\u4e2d\u6703\u770b\u5230\u985e\u4f3c\u7684\u5167\u5bb9\u3002 \u5b8c\u6210\u524d\u63d0\u7684\u6aa2\u67e5\u5f8c\uff0c\u5b89\u88dd toolz \u53ea\u8981\u628a TOOLZ.zip \u6a94\u89e3\u58d3 (unzip) \u5f8c\u5373\u5b8c\u6210\u3002 \u6253\u958b toolz \u7684\u76ee\u9304\uff0c\u6703\u770b\u5230\u4ee5\u4e0b\u7684\u76ee\u9304\u53ca\u6a94\u6848\u540d\u7a31\u3002 toolz\\ \u251c doc\\ \u251c locales\\ \u251c plugins\\ \u251c tool.exe \u251c config.json Wiki \u4e2d\u6587: \u8b80\u53d6\ufe63\u6c42\u503c\ufe63\u8f38\u51fa\u5faa\u74b0 \u21a9 Wiki \u82f1\u6587: Read\u2013Eval\u2013Print Loop \u21a9 \u7c21\u66f8\u6587\u7ae0: \u5e38\u89c1\u7f16\u7a0b\u8bed\u8a00\u5bf9REPL\u652f\u6301\u60c5\u51b5\u5c0f\u7ed3 \u21a9","title":"Installation"},{"location":"ug-index/","text":"User Guide \u8a3b\u518a IoT Device","title":"User Guide"},{"location":"ug-index/#user-guide","text":"\u8a3b\u518a IoT Device","title":"User Guide"},{"location":"ug-setup-organization/","text":"User Guide - Setup of Organization \u67e5\u770b\u7d44\u7e54\u5167\u5bb9 \u8a2d\u5b9a\u7d44\u7e54","title":"User Guide - Setup of Organization"},{"location":"ug-setup-organization/#user-guide-setup-of-organization","text":"","title":"User Guide - Setup of Organization"},{"location":"ug-setup-organization/#_1","text":"","title":"\u67e5\u770b\u7d44\u7e54\u5167\u5bb9"},{"location":"ug-setup-organization/#_2","text":"","title":"\u8a2d\u5b9a\u7d44\u7e54"},{"location":"useful-reference/","text":"ZIOT Useful Reference Here collects some external reference or links which are useful for our project. Markdown Syntax reference Markdown Cheatsheet is a reference on gitub","title":"ZIOT Useful Reference"},{"location":"useful-reference/#ziot-useful-reference","text":"Here collects some external reference or links which are useful for our project.","title":"ZIOT Useful Reference"},{"location":"useful-reference/#markdown-syntax-reference","text":"Markdown Cheatsheet is a reference on gitub","title":"Markdown Syntax reference"}]}